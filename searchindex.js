Search.setIndex({"docnames": ["contributing", "index", "reference/constants", "reference/decorators", "reference/exceptions", "reference/factories/base", "reference/factories/beanie_odm_factory", "reference/factories/dataclass_factory", "reference/factories/index", "reference/factories/odmantic_odm_factory", "reference/factories/pydantic_factory", "reference/factories/typed_dict_factory", "reference/field_meta", "reference/fields", "reference/index", "reference/persistence", "reference/pytest_plugin", "reference/value_generators/complex_types", "reference/value_generators/constrained_collections", "reference/value_generators/constrained_dates", "reference/value_generators/constrained_numbers", "reference/value_generators/constrained_strings", "reference/value_generators/index", "reference/value_generators/primitives", "usage/configuration", "usage/declaring_factories", "usage/decorators", "usage/fields", "usage/fixtures", "usage/handling_custom_types", "usage/index", "usage/library_factories"], "filenames": ["contributing.rst", "index.rst", "reference/constants.rst", "reference/decorators.rst", "reference/exceptions.rst", "reference/factories/base.rst", "reference/factories/beanie_odm_factory.rst", "reference/factories/dataclass_factory.rst", "reference/factories/index.rst", "reference/factories/odmantic_odm_factory.rst", "reference/factories/pydantic_factory.rst", "reference/factories/typed_dict_factory.rst", "reference/field_meta.rst", "reference/fields.rst", "reference/index.rst", "reference/persistence.rst", "reference/pytest_plugin.rst", "reference/value_generators/complex_types.rst", "reference/value_generators/constrained_collections.rst", "reference/value_generators/constrained_dates.rst", "reference/value_generators/constrained_numbers.rst", "reference/value_generators/constrained_strings.rst", "reference/value_generators/index.rst", "reference/value_generators/primitives.rst", "usage/configuration.rst", "usage/declaring_factories.rst", "usage/decorators.rst", "usage/fields.rst", "usage/fixtures.rst", "usage/handling_custom_types.rst", "usage/index.rst", "usage/library_factories.rst"], "titles": ["Contributing", "Polyfactory", "constants", "decorators", "exceptions", "base_factory", "beanie_odm_factory", "dataclass_factory", "factories", "odmantic_odm_factory", "pydantic_factory", "typed_dict_factory", "field_meta", "fields", "API Reference", "persistence", "pytest_plugin", "complex_types", "constrained_collections", "constrained_dates", "constrained_numbers", "constrained_strings", "value_generators", "primitives", "Factory Configuration", "Declaring Factories", "The <code class=\"docutils literal notranslate\"><span class=\"pre\">post_generated</span></code> decorator", "Factory Fields", "Pytest fixtures", "Handling Custom Types", "Usage Guide", "Polyfactory Factories"], "terms": {"instal": [0, 4], "poetri": 0, "virtual": 0, "depend": [0, 4, 20, 26, 31], "If": [0, 5, 10, 24], "you": [0, 24, 25, 27, 28, 29], "re": [0, 27], "work": [0, 1, 29], "need": [0, 24, 27, 29], "build": [0, 1, 4, 5, 6, 10, 13, 24, 25, 26, 27, 28, 29], "extra": 0, "pre": 0, "commit": 0, "hook": 0, "fork": 0, "upstream": 0, "repositori": 0, "clone": 0, "": [0, 1, 5, 7, 10, 11, 12, 13, 20, 24, 27, 29], "make": [0, 27, 31], "whatev": 0, "chang": [0, 1], "addit": [0, 31], "wish": 0, "pleas": 0, "try": 0, "keep": 0, "your": [0, 29], "histori": 0, "clean": 0, "1": [0, 24, 27], "note": [0, 5, 6, 9], "100": 0, "test": [0, 10, 24], "ar": [0, 1, 4, 5, 10, 13, 20, 24, 25, 27, 28, 31], "mandatori": 0, "onc": [0, 24], "readi": 0, "add": [0, 20, 24, 29], "pr": 0, "main": [0, 1, 5], "repo": 0, "pull": 0, "request": 0, "an": [0, 5, 6, 7, 9, 10, 11, 13, 16, 19, 20, 21, 23, 24, 27, 29, 31], "explan": 0, "The": [0, 1, 13, 15, 20, 25, 29, 30, 31], "suit": 0, "requir": [0, 1, 4, 13, 24, 31], "have": [0, 24], "instanc": [0, 5, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 23, 24, 27, 29], "mongodb": [0, 6], "avail": [0, 1], "can": [0, 1, 17, 18, 20, 24, 25, 27, 28, 29], "launch": 0, "one": [0, 20, 27], "us": [0, 1, 2, 4, 5, 6, 10, 12, 13, 16, 20, 24, 25, 26, 28, 29], "root": [0, 10], "level": 0, "docker": 0, "compos": 0, "config": 0, "detach": 0, "ani": [0, 5, 6, 7, 9, 10, 11, 12, 13, 16, 17, 18, 24, 25, 27, 29, 31], "other": [0, 5, 13, 24, 25, 27, 31], "mean": [0, 27], "i": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 20, 24, 25, 26, 27, 28, 29], "locat": 0, "directori": 0, "built": [0, 17], "rest": 0, "sphinx": 0, "unfamiliar": 0, "those": 0, "restructuredtext": 0, "primer": 0, "quickstart": 0, "recommend": 0, "read": [0, 24], "we": [0, 1, 6, 24, 27, 28, 29, 31], "welcom": 0, "enhanc": 0, "improv": 0, "usabl": 0, "custom": [0, 1, 10, 20, 27, 30], "inherit": 0, "pydata": 0, "which": [0, 1, 25, 27, 29], "come": 0, "lot": 0, "option": [0, 13, 16, 20, 24, 28, 31], "out": 0, "box": 0, "style": 0, "setup": 0, "static": 0, "site": 0, "gener": [0, 1, 5, 6, 7, 9, 10, 11, 13, 17, 18, 19, 20, 23, 24, 25, 26, 27, 29], "should": [0, 5, 10, 18, 24, 27], "consult": 0, "first": [0, 24], "step": 0, "To": [0, 24, 28, 29], "Then": 0, "serv": 0, "them": 0, "content": 0, "feel": 0, "free": 0, "exampl": [0, 21, 24, 25, 26, 27, 28, 29], "clarifi": 0, "text": 0, "restructur": 0, "etc": [0, 24], "sure": [0, 31], "follow": 0, "guidelin": 0, "idiomat": 0, "english": 0, "simpl": [0, 1, 27], "languag": 0, "self": [0, 24, 29], "contain": [0, 12, 17], "provid": [0, 4, 27, 29], "link": 0, "where": [0, 27], "applic": 0, "intersphinx": 0, "wherev": 0, "possibl": [0, 1, 27], "when": [0, 4, 5, 10, 24, 26, 27, 29], "referenc": 0, "extern": 0, "librari": [0, 1, 5, 24, 25, 27, 29, 31], "diagram": 0, "mermaidj": 0, "updat": 0, "changelog": 0, "md": 0, "increment": [0, 20], "version": [0, 1], "pyproject": 0, "toml": 0, "push": 0, "In": [0, 24, 27, 28, 29], "github": 0, "go": 0, "tab": 0, "pick": 0, "draft": 0, "give": [0, 27], "titl": 0, "tag": 0, "both": [0, 24], "vx": 0, "x": 0, "fill": 0, "descript": 0, "let": [0, 27], "do": [0, 24, 27, 29, 31], "publish": 0, "look": [0, 27], "under": [0, 1, 27], "action": 0, "pane": 0, "correctli": 0, "power": 1, "mock": [1, 5, 6, 24, 27, 29], "data": [1, 6, 12, 15, 24, 27], "base": [1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 20, 25, 27, 31], "around": 1, "type": [1, 2, 5, 6, 7, 9, 10, 11, 12, 13, 16, 17, 18, 20, 21, 24, 25, 26, 27, 28, 30, 31], "hint": 1, "support": [1, 5, 6, 7, 9, 10, 11, 24, 28], "dataclass": [1, 7, 24, 25, 26, 27, 28, 29, 31], "dict": [1, 5, 9, 13, 24, 25, 27, 29, 31], "model": [1, 5, 7, 9, 10, 11, 12, 16, 24, 25, 31], "more": [1, 24], "pip": 1, "prior": 1, "2": [1, 27], "thi": [1, 2, 5, 9, 10, 12, 13, 24, 25, 26, 27, 28, 29, 31], "wa": [1, 13], "known": 1, "name": [1, 5, 10, 12, 13, 16, 24, 25, 26, 27, 28], "gain": 1, "quit": 1, "bit": 1, "popular": 1, "A": [1, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 23], "motiv": 1, "0": [1, 24, 25, 27], "releas": 1, "want": 1, "than": [1, 19, 20, 27], "just": 1, "someth": 1, "also": [1, 24, 25, 28], "its": [1, 24, 26, 27], "core": 1, "architectur": 1, "As": [1, 24, 28, 31], "would": 1, "longer": 1, "directli": [1, 27], "ti": 1, "chosen": 1, "new": [1, 5, 24], "reflect": 1, "capabl": [1, 10], "It": 1, "odmant": [1, 9, 31], "beani": [1, 6, 31], "odm": [1, 24], "well": [1, 24], "minim": [1, 18, 20, 24], "from": [1, 5, 6, 7, 10, 11, 12, 13, 16, 24, 25, 26, 27, 28, 29, 31], "import": [1, 24, 25, 26, 27, 28, 29], "dataclassfactori": [1, 7, 24, 25, 26, 27, 28, 29, 31], "class": [1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 20, 24, 25, 26, 27, 28, 29, 31], "person": [1, 24, 25, 27, 28, 29], "str": [1, 5, 12, 13, 16, 21, 23, 24, 25, 27, 28, 29], "ag": [1, 24, 25, 27, 28], "float": [1, 20, 23, 24, 25, 27, 28], "height": [1, 24, 25], "weight": [1, 24, 25], "personfactori": [1, 24, 25, 27, 28, 29], "__model__": [1, 5, 10, 24, 25, 26, 27, 28, 29], "def": [1, 24, 25, 26, 27, 28, 29], "test_is_person": [1, 25], "none": [1, 3, 5, 6, 12, 13, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29], "person_inst": [1, 24, 25, 27, 28, 29], "assert": [1, 24, 25, 26, 27, 28, 29], "isinst": [1, 24, 25, 28, 29], "That": [1, 25], "almost": [1, 20], "abl": 1, "creat": [1, 6, 10, 12, 13, 16, 25], "object": [1, 3, 12, 13, 16], "fit": 1, "definit": [1, 25], "becaus": [1, 6, 24, 28], "inform": 1, "sourc": 1, "truth": 1, "pars": 1, "store": [1, 12, 13, 17, 24], "dictionari": [1, 5, 9, 24, 27], "kwarg": [1, 4, 5, 6, 10, 13, 15, 20, 24, 27, 28], "pass": [1, 5, 6, 10, 13, 20, 27], "constructor": [1, 20], "map": [2, 5, 9, 27, 29], "annot": [2, 5, 12], "concret": 2, "normal": [2, 12, 28], "python": [2, 20], "3": [2, 26], "9": 2, "polyfactori": [3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30], "post_gener": [3, 30], "descriptor": 3, "wrap": [3, 13, 26, 28], "classmethod": [3, 5, 6, 7, 9, 10, 11, 12, 24, 26, 27, 29], "postgener": [3, 13, 26], "field": [3, 5, 6, 7, 10, 11, 12, 14, 17, 18, 24, 26, 30], "__init__": [3, 12, 13, 15, 16, 20, 29], "method": [3, 5, 6, 9, 12, 13, 20, 24, 25, 27, 28, 29], "union": [3, 24, 25, 27, 28], "callabl": [3, 5, 9, 13, 18, 20, 21, 27, 28, 29], "factoryexcept": 4, "factori": [4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 16, 17, 18, 26, 28, 30], "error": 4, "configurationexcept": 4, "configur": [4, 30], "misconfigur": 4, "parameterexcept": [4, 13], "paramet": [4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 23, 26], "wrong": 4, "missingbuildkwargexcept": [4, 27], "miss": 4, "missingdependencyexcept": 4, "importerror": 4, "is_factori": 5, "valu": [5, 6, 7, 9, 10, 11, 12, 13, 18, 19, 20, 21, 23, 24, 27, 29], "typeguard": [5, 6, 7, 9, 10, 11], "basefactori": [5, 7, 10, 11, 16, 17, 18, 24, 31], "determin": [5, 6, 7, 9, 10, 11, 20], "given": [5, 6, 7, 9, 10, 11, 13, 20, 23, 27], "subclass": [5, 6, 10, 25], "modelfactori": [5, 6, 9, 10, 25, 31], "arbitrari": [5, 6, 7, 9, 10, 11, 13], "return": [5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29], "boolean": [5, 10, 20, 23], "abc": [5, 31], "t": [5, 6, 7, 9, 10, 13, 15, 18, 20, 21, 29], "hold": 5, "logic": [5, 6, 24], "is_factory_typ": 5, "bool": [5, 10, 16, 18, 20, 21, 23], "whether": [5, 6, 7, 9, 10, 11, 18, 20, 21, 23], "dictat": [5, 20], "is_batch_factory_typ": 5, "sequenc": 5, "batch": [5, 13, 27, 28], "extract_field_build_paramet": 5, "field_meta": [5, 6, 7, 10, 11, 14, 17, 18, 20], "fieldmeta": [5, 6, 7, 10, 11, 12, 17, 18], "build_arg": 5, "extract": 5, "meta": [5, 10, 12, 17, 18], "abstract": [5, 27, 31], "is_supported_typ": [5, 6, 7, 9, 10, 11], "seed_random": 5, "seed": [5, 27], "int": [5, 13, 18, 20, 21, 23, 24, 25, 27, 28], "faker": [5, 19], "random": [5, 20, 21, 23, 27], "integ": [5, 20, 23], "set": [5, 10, 18], "is_ignored_typ": 5, "check": 5, "ignor": [5, 13], "meant": [5, 13, 25], "overwritten": 5, "extens": 5, "get_provider_map": [5, 9, 29], "distinct": [5, 9], "allow": [5, 9, 13, 16, 24, 27], "overrid": [5, 9, 10, 29], "get_mock_valu": 5, "create_factori": [5, 25], "tupl": [5, 12, 20], "dynam": [5, 24, 25], "get_field_valu": [5, 6], "field_build_paramet": [5, 6], "exist": [5, 6], "otherwis": [5, 6], "should_set_none_valu": 5, "metadata": [5, 7, 10, 11, 12], "should_set_field_valu": [5, 10], "field_nam": [5, 10], "get_model_field": [5, 7, 10, 11], "list": [5, 6, 7, 10, 11, 12, 15, 18, 24, 25, 27, 28, 31], "retriev": [5, 7, 10, 11], "process_kwarg": 5, "process": [5, 24], "result": [5, 13, 15, 17, 21, 23, 24, 27, 28], "size": [5, 13, 24, 27, 28], "n": [5, 24], "create_sync": [5, 24], "persist": [5, 6, 14], "synchron": [5, 15, 24], "singl": [5, 6, 15, 24], "create_batch_sync": [5, 24], "async": [5, 6, 15, 24], "create_async": [5, 24], "asynchron": [5, 15, 24], "create_batch_async": [5, 24], "beaniepersistencehandl": 6, "asyncpersistenceprotocol": [6, 15, 24], "handler": 6, "save": [6, 15, 24], "save_mani": [6, 15, 24], "multipl": [6, 15, 20], "cannot": [6, 28, 29], "insert_mani": 6, "here": [6, 24], "doesn": 6, "beaniedocumentfactori": [6, 31], "document": [6, 24, 31], "base_factori": 8, "dataclass_factori": 8, "typed_dict_factori": 8, "beanie_odm_factori": 8, "odmantic_odm_factori": 8, "pydantic_factori": [8, 25, 31], "odmanticmodelfactori": [9, 31], "is_pydantic_model": 10, "basemodel": [10, 25], "guard": 10, "pydanticfieldmeta": 10, "handl": [10, 17, 20, 21, 30], "pydant": [10, 17, 20, 21, 25, 31], "modelfield": 10, "from_model_field": 10, "model_field": 10, "use_alia": 10, "alia": 10, "factory_use_construct": 10, "fals": [10, 16, 18, 21, 23], "valid": [10, 20, 27], "made": 10, "instanti": 10, "onli": [10, 24, 27, 31], "is_custom_root_field": 10, "typeddictfactori": [11, 25, 27, 31], "typeddictt": 11, "typeddict": [11, 12, 13, 25, 27], "null": 12, "sentinel": 12, "empti": 12, "constraint": [12, 19, 20, 23], "regard": 12, "about": [12, 24], "default": [12, 27, 29], "children": 12, "properti": 12, "type_arg": 12, "arg": [12, 13, 15, 20, 27], "from_typ": 12, "builder": 12, "wrappedcal": 13, "ref": 13, "util": 13, "prevent": 13, "bind": 13, "mark": 13, "attribut": [13, 24, 26, 27], "time": [13, 27, 31], "p": 13, "invok": [13, 27], "whenev": 13, "fn": 13, "to_valu": 13, "output": [13, 20], "after": [13, 26], "design": [13, 27], "post": [13, 26, 27], "callback": [13, 20], "fixtur": [13, 16, 30], "pytest": [13, 16, 27, 30], "regist": [13, 16, 28], "call": [13, 24, 27, 28], "rais": [13, 27], "constant": 14, "except": [14, 27], "decor": [14, 16, 25, 28, 30], "pytest_plugin": [14, 28], "value_gener": [14, 17, 18, 19, 20, 21, 23], "syncpersistenceprotocol": [15, 24], "protocol": [15, 20], "sync": [15, 24, 27], "factoryfixtur": 16, "scope": [16, 27], "function": [16, 20, 24, 27], "autous": 16, "register_fixtur": [16, 28], "auto": 16, "handle_collection_typ": 17, "container_typ": 17, "recurs": 17, "accept": [17, 18, 28], "argument": [17, 18], "handle_complex_typ": 17, "info": 17, "graph": 17, "like": [17, 27], "structur": 17, "handle_constrained_collect": 18, "collection_typ": 18, "item_typ": 18, "max_item": 18, "min_item": 18, "unique_item": 18, "constrain": [18, 20, 21], "collect": 18, "item": 18, "maxim": [18, 20], "number": [18, 20], "uniqu": 18, "handle_constrained_d": 19, "ge": [19, 20], "date": [19, 24, 25, 27, 28], "gt": [19, 20], "le": [19, 20], "lt": [19, 20], "fulfil": [19, 25], "expect": 19, "less": [19, 20], "equal": [19, 20], "greater": [19, 20], "numbergeneratorprotocol": 20, "numer": 20, "__call__": 20, "minimum": [20, 21, 23], "maximum": [20, 21, 23], "signatur": [20, 27], "almost_equal_float": 20, "value_1": 20, "value_2": 20, "delta": [20, 27], "1e": 20, "08": 20, "true": [20, 24, 29], "two": 20, "consid": 20, "problemat": 20, "comparison": 20, "is_multiply_of_multiple_of_in_rang": 20, "multiple_of": 20, "least": 20, "multipli": 20, "li": 20, "rang": [20, 27], "between": 20, "passes_pydantic_multiple_valid": 20, "anoth": 20, "get_incr": 20, "t_type": [20, 21], "get": [20, 25, 27], "small": 20, "e": [20, 27, 31], "entri": 20, "get_value_or_non": 20, "equal_valu": 20, "get_constrained_number_rang": 20, "primit": [20, 22], "decim": [20, 23], "generate_constrained_numb": 20, "handle_constrained_int": 20, "handle_constrained_float": 20, "validate_max_digit": 20, "max_digit": 20, "decimal_plac": 20, "max": 20, "digit": 20, "place": [20, 24, 29], "handle_decimal_length": 20, "generated_decim": 20, "length": [20, 21, 23], "handle_constrained_decim": 20, "handle_constrained_string_or_byt": 21, "lower_cas": [21, 23], "upper_cas": [21, 23], "min_length": [21, 23], "max_length": [21, 23], "pattern": [21, 27], "string": [21, 23, 29], "byte": [21, 23], "constr": 21, "conbyt": 21, "lowercas": [21, 23], "uppercas": [21, 23], "regex": 21, "complex_typ": 22, "constrained_collect": 22, "constrained_d": 22, "constrained_numb": 22, "constrained_str": 22, "create_random_float": 23, "create_random_integ": 23, "create_random_decim": 23, "create_random_byt": 23, "create_random_str": 23, "create_random_boolean": 23, "special": [24, 29], "dunder": 24, "doubl": 24, "underscor": 24, "refer": [24, 29], "api": [24, 27], "below": [24, 25], "discuss": 24, "some": [24, 29], "depth": 24, "__random_seed__": 24, "__random__": [24, 26, 27], "choic": [24, 27], "john": 24, "alic": 24, "georg": 24, "test_random_se": 24, "outcom": 24, "determinist": 24, "ha": [24, 27], "been": 24, "control": [24, 27, 28], "produc": 24, "affect": [24, 27], "all": [24, 26, 27, 31], "10": 24, "test_setting_random": 24, "ident": 24, "previou": 24, "differ": 24, "being": [24, 27], "actual": 24, "embed": 24, "insid": [24, 25], "complex": 24, "__faker__": [24, 26], "local": 24, "es_": 24, "cl": [24, 26, 27, 29], "test_setting_fak": 24, "spanish": 24, "asunci\u00f3n": 24, "c\u00e9spede": 24, "abov": [24, 27, 28, 29, 31], "understand": [24, 27], "why": 24, "see": 24, "four": 24, "must": [24, 26, 28], "specifi": 24, "asyncio": 24, "sleep": 24, "uuid": [24, 25, 27, 28, 29], "id": [24, 25, 27, 28, 29], "mock_db": 24, "syncpersistencehandl": 24, "stuff": 24, "orm": 24, "cach": 24, "redi": 24, "our": [24, 29], "case": [24, 27, 29, 31], "simpli": 24, "same": [24, 25], "asyncpersistencehandl": 24, "await": 24, "0001": 24, "again": 24, "__sync_persistence__": 24, "__async_persistence__": 24, "test_sync_persistence_build": 24, "test_sync_persistence_batch": 24, "person_batch": 24, "test_async_persistence_build": 24, "test_async_persistence_batch": 24, "With": 24, "now": [24, 26, 27], "respect": [24, 31], "explain": 24, "section": 24, "declar": [24, 27, 28, 30], "intervent": 24, "user": [24, 25], "reus": 24, "For": [24, 25, 26, 27], "petfactori": [24, 25, 27], "datetim": [24, 25, 26, 27, 28], "enum": [24, 25, 27], "speci": [24, 25, 27], "cat": [24, 25, 27], "dog": [24, 25, 27], "pet": [24, 25, 27], "sound": [24, 25, 27], "hobbi": [24, 25, 27, 28], "birthdai": [24, 25, 27, 28], "asset": [24, 25, 27], "test_dynamic_factory_gener": [24, 25], "len": [24, 25, 27, 28, 29], "__set_as_default_factory_for_type__": 24, "roxi": [24, 27], "spammi": 24, "mosh": 24, "test_default_pet_factori": 24, "defin": [25, 27], "done": 25, "syntax": 25, "appli": 25, "export": [25, 27, 31], "Or": [25, 27], "3rd": [25, 29], "parti": [25, 29], "implement": 25, "long": 25, "stdlib": [25, 27], "interfac": 25, "although": 25, "primarili": 25, "expos": 25, "intern": 25, "test_imperative_factory_cr": 25, "pet_factori": 25, "pet_inst": [25, 27], "current": 26, "usual": 26, "timedelta": [26, 27], "cast": 26, "datetimerang": [26, 27], "to_dt": [26, 27], "from_dt": [26, 27], "default_factori": [26, 27], "datetimerangefactori": [26, 27], "time_delta": 26, "3d": 26, "test_post_gener": [26, 27], "date_range_inst": [26, 27], "dai": [26, 27], "semant": 27, "nonetheless": 27, "cover": 27, "few": 27, "hardcod": [27, 29], "woof": 27, "test_is_pet_inst": 27, "randomli": 27, "though": 27, "often": 27, "desir": 27, "could": 27, "instead": 27, "restrict": [27, 28], "ralph": 27, "test_pet_choic": 27, "mere": 27, "cleaner": 27, "simpler": 27, "fact": 27, "includ": [27, 31], "thu": 27, "write": 27, "so": [27, 29, 31], "lambda": [27, 29], "easi": 27, "nice": 27, "access": [27, 28], "itself": [27, 28], "intent": 27, "while": 27, "own": [27, 29], "attach": 27, "sever": 27, "wai": 27, "g": [27, 31], "consist": 27, "rather": 27, "global": 27, "complet": 27, "typing_extens": 27, "test_id_is_ignor": 27, "test_id_is_requir": 27, "alreadi": 27, "non": 27, "most": 27, "best": 27, "avoid": 27, "helper": 27, "add_timedelta": 27, "cb": 27, "receiv": 27, "register_fixture_decor": 28, "nick": 28, "test_person_factori": 28, "person_factori": 28, "overcom": 28, "separ": 28, "without": 28, "person_factory_fixtur": 28, "still": 28, "another_person_inst": 28, "alias": 28, "aliased_person_factori": 28, "classroom": 28, "teacher": 28, "pupil": 28, "classroomfactori": 28, "ludmilla": 28, "newman": 28, "20": 28, "test_fixture_field": 28, "classroom_inst": 28, "similar": 28, "propag": 28, "sometim": 29, "either": 29, "codebas": 29, "achiev": 29, "extend": [29, 31], "what": 29, "providers_map": 29, "code": 29, "customsecret": 29, "__repr__": 29, "__str__": 29, "secret": 29, "unknown": 29, "super": 29, "jeronimo": 29, "test_custom_secret_cr": 29, "repr": 29, "each": 29, "appropri": 29, "great": 29, "localis": 29, "fashion": 29, "mani": 29, "lead": 29, "unnecessari": 29, "duplic": 29, "solut": 29, "typevar": 29, "customdataclassfactori": 29, "__is_base_factory__": 29, "test_custom_dataclass_base_factori": 29, "These": 31, "thei": 31, "namespac": 31, "modul": 31, "ad": 31, "packag": 31, "checkout": 31}, "objects": {"polyfactory": [[2, 0, 0, "-", "constants"], [3, 0, 0, "-", "decorators"], [4, 0, 0, "-", "exceptions"], [12, 0, 0, "-", "field_meta"], [13, 0, 0, "-", "fields"], [15, 0, 0, "-", "persistence"], [16, 0, 0, "-", "pytest_plugin"]], "polyfactory.decorators": [[3, 1, 1, "", "post_generated"]], "polyfactory.decorators.post_generated": [[3, 2, 1, "", "__init__"]], "polyfactory.exceptions": [[4, 3, 1, "", "ConfigurationException"], [4, 3, 1, "", "FactoryException"], [4, 3, 1, "", "MissingBuildKwargException"], [4, 3, 1, "", "MissingDependencyException"], [4, 3, 1, "", "ParameterException"]], "polyfactory.factories": [[5, 0, 0, "-", "base"], [6, 0, 0, "-", "beanie_odm_factory"], [7, 0, 0, "-", "dataclass_factory"], [9, 0, 0, "-", "odmantic_odm_factory"], [10, 0, 0, "-", "pydantic_factory"], [11, 0, 0, "-", "typed_dict_factory"]], "polyfactory.factories.base": [[5, 1, 1, "", "BaseFactory"], [5, 4, 1, "", "is_factory"]], "polyfactory.factories.base.BaseFactory": [[5, 2, 1, "", "batch"], [5, 2, 1, "", "build"], [5, 2, 1, "", "create_async"], [5, 2, 1, "", "create_batch_async"], [5, 2, 1, "", "create_batch_sync"], [5, 2, 1, "", "create_factory"], [5, 2, 1, "", "create_sync"], [5, 2, 1, "", "extract_field_build_parameters"], [5, 2, 1, "", "get_field_value"], [5, 2, 1, "", "get_mock_value"], [5, 2, 1, "", "get_model_fields"], [5, 2, 1, "", "get_provider_map"], [5, 2, 1, "", "is_batch_factory_type"], [5, 2, 1, "", "is_factory_type"], [5, 2, 1, "", "is_ignored_type"], [5, 2, 1, "", "is_supported_type"], [5, 2, 1, "", "process_kwargs"], [5, 2, 1, "", "seed_random"], [5, 2, 1, "", "should_set_field_value"], [5, 2, 1, "", "should_set_none_value"]], "polyfactory.factories.beanie_odm_factory": [[6, 1, 1, "", "BeanieDocumentFactory"], [6, 1, 1, "", "BeaniePersistenceHandler"]], "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory": [[6, 2, 1, "", "get_field_value"], [6, 2, 1, "", "is_supported_type"]], "polyfactory.factories.beanie_odm_factory.BeaniePersistenceHandler": [[6, 2, 1, "", "save"], [6, 2, 1, "", "save_many"]], "polyfactory.factories.dataclass_factory": [[7, 1, 1, "", "DataclassFactory"]], "polyfactory.factories.dataclass_factory.DataclassFactory": [[7, 2, 1, "", "get_model_fields"], [7, 2, 1, "", "is_supported_type"]], "polyfactory.factories.odmantic_odm_factory": [[9, 1, 1, "", "OdmanticModelFactory"]], "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory": [[9, 2, 1, "", "get_provider_map"], [9, 2, 1, "", "is_supported_type"]], "polyfactory.factories.pydantic_factory": [[10, 1, 1, "", "ModelFactory"], [10, 1, 1, "", "PydanticFieldMeta"], [10, 4, 1, "", "is_pydantic_model"]], "polyfactory.factories.pydantic_factory.ModelFactory": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_fields"], [10, 2, 1, "", "is_custom_root_field"], [10, 2, 1, "", "is_supported_type"], [10, 2, 1, "", "should_set_field_value"]], "polyfactory.factories.pydantic_factory.PydanticFieldMeta": [[10, 2, 1, "", "from_model_field"]], "polyfactory.factories.typed_dict_factory": [[11, 1, 1, "", "TypedDictFactory"]], "polyfactory.factories.typed_dict_factory.TypedDictFactory": [[11, 2, 1, "", "get_model_fields"], [11, 2, 1, "", "is_supported_type"]], "polyfactory.field_meta": [[12, 1, 1, "", "Constraints"], [12, 1, 1, "", "FieldMeta"], [12, 1, 1, "", "Null"]], "polyfactory.field_meta.FieldMeta": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "from_type"], [12, 5, 1, "", "type_args"]], "polyfactory.fields": [[13, 1, 1, "", "Fixture"], [13, 1, 1, "", "Ignore"], [13, 1, 1, "", "PostGenerated"], [13, 1, 1, "", "Require"], [13, 1, 1, "", "Use"], [13, 1, 1, "", "WrappedCallable"]], "polyfactory.fields.Fixture": [[13, 2, 1, "", "__init__"], [13, 2, 1, "", "to_value"]], "polyfactory.fields.PostGenerated": [[13, 2, 1, "", "__init__"], [13, 2, 1, "", "to_value"]], "polyfactory.fields.Use": [[13, 2, 1, "", "__init__"], [13, 2, 1, "", "to_value"]], "polyfactory.persistence": [[15, 1, 1, "", "AsyncPersistenceProtocol"], [15, 1, 1, "", "SyncPersistenceProtocol"]], "polyfactory.persistence.AsyncPersistenceProtocol": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "save"], [15, 2, 1, "", "save_many"]], "polyfactory.persistence.SyncPersistenceProtocol": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "save"], [15, 2, 1, "", "save_many"]], "polyfactory.pytest_plugin": [[16, 1, 1, "", "FactoryFixture"], [16, 4, 1, "", "register_fixture"]], "polyfactory.pytest_plugin.FactoryFixture": [[16, 2, 1, "", "__init__"]], "polyfactory.value_generators": [[17, 0, 0, "-", "complex_types"], [18, 0, 0, "-", "constrained_collections"], [19, 0, 0, "-", "constrained_dates"], [20, 0, 0, "-", "constrained_numbers"], [21, 0, 0, "-", "constrained_strings"], [23, 0, 0, "-", "primitives"]], "polyfactory.value_generators.complex_types": [[17, 4, 1, "", "handle_collection_type"], [17, 4, 1, "", "handle_complex_type"]], "polyfactory.value_generators.constrained_collections": [[18, 4, 1, "", "handle_constrained_collection"]], "polyfactory.value_generators.constrained_dates": [[19, 4, 1, "", "handle_constrained_date"]], "polyfactory.value_generators.constrained_numbers": [[20, 1, 1, "", "NumberGeneratorProtocol"], [20, 4, 1, "", "almost_equal_floats"], [20, 4, 1, "", "generate_constrained_number"], [20, 4, 1, "", "get_constrained_number_range"], [20, 4, 1, "", "get_increment"], [20, 4, 1, "", "get_value_or_none"], [20, 4, 1, "", "handle_constrained_decimal"], [20, 4, 1, "", "handle_constrained_float"], [20, 4, 1, "", "handle_constrained_int"], [20, 4, 1, "", "handle_decimal_length"], [20, 4, 1, "", "is_multiply_of_multiple_of_in_range"], [20, 4, 1, "", "passes_pydantic_multiple_validator"], [20, 4, 1, "", "validate_max_digits"]], "polyfactory.value_generators.constrained_numbers.NumberGeneratorProtocol": [[20, 2, 1, "", "__call__"], [20, 2, 1, "", "__init__"]], "polyfactory.value_generators.constrained_strings": [[21, 4, 1, "", "handle_constrained_string_or_bytes"]], "polyfactory.value_generators.primitives": [[23, 4, 1, "", "create_random_boolean"], [23, 4, 1, "", "create_random_bytes"], [23, 4, 1, "", "create_random_decimal"], [23, 4, 1, "", "create_random_float"], [23, 4, 1, "", "create_random_integer"], [23, 4, 1, "", "create_random_string"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:exception", "4": "py:function", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "exception", "Python exception"], "4": ["py", "function", "Python function"], "5": ["py", "property", "Python property"]}, "titleterms": {"contribut": 0, "set": [0, 24], "up": 0, "environ": 0, "code": 0, "workflow": 0, "project": 0, "document": 0, "doc": 0, "theme": 0, "appear": 0, "run": 0, "local": 0, "write": 0, "edit": 0, "creat": [0, 29], "new": 0, "releas": 0, "polyfactori": [1, 31], "instal": 1, "relat": 1, "pydant": 1, "factori": [1, 8, 24, 25, 27, 29, 31], "exampl": 1, "constant": 2, "decor": [3, 26], "except": 4, "base_factori": 5, "beanie_odm_factori": 6, "dataclass_factori": 7, "odmantic_odm_factori": 9, "pydantic_factori": 10, "typed_dict_factori": 11, "field_meta": 12, "field": [13, 27, 28], "api": 14, "refer": 14, "persist": [15, 24], "pytest_plugin": 16, "complex_typ": 17, "constrained_collect": 18, "constrained_d": 19, "constrained_numb": 20, "constrained_str": 21, "value_gener": 22, "primit": 23, "configur": 24, "seed": 24, "random": 24, "faker": 24, "handler": 24, "defin": 24, "default": 24, "declar": 25, "imper": 25, "creation": 25, "The": [26, 27, 28], "post_gener": 26, "us": 27, "ignor": 27, "requir": 27, "postgener": 27, "pytest": 28, "fixtur": 28, "handl": 29, "custom": 29, "type": 29, "base": 29, "usag": 30, "guid": 30}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"constrained_dates": [[19, "module-polyfactory.value_generators.constrained_dates"]], "constrained_strings": [[21, "module-polyfactory.value_generators.constrained_strings"]], "constrained_collections": [[18, "module-polyfactory.value_generators.constrained_collections"]], "complex_types": [[17, "module-polyfactory.value_generators.complex_types"]], "field_meta": [[12, "module-polyfactory.field_meta"]], "API Reference": [[14, "api-reference"]], "pytest_plugin": [[16, "module-polyfactory.pytest_plugin"]], "value_generators": [[22, "value-generators"]], "constrained_numbers": [[20, "module-polyfactory.value_generators.constrained_numbers"]], "fields": [[13, "module-polyfactory.fields"]], "persistence": [[15, "module-polyfactory.persistence"]], "primitives": [[23, "module-polyfactory.value_generators.primitives"]], "Factory Fields": [[27, "factory-fields"]], "The Use Field": [[27, "the-use-field"]], "The Ignore Field": [[27, "the-ignore-field"]], "The Require Field": [[27, "the-require-field"]], "The PostGenerated Field": [[27, "the-postgenerated-field"]], "The post_generated decorator": [[26, "the-post-generated-decorator"]], "Usage Guide": [[30, "usage-guide"]], "Polyfactory Factories": [[31, "polyfactory-factories"]], "Pytest fixtures": [[28, "pytest-fixtures"]], "The Fixture Field": [[28, "the-fixture-field"]], "Factory Configuration": [[24, "factory-configuration"]], "Seeding Randomness": [[24, "seeding-randomness"]], "Setting Random": [[24, "setting-random"]], "Setting Faker": [[24, "setting-faker"]], "Persistence Handlers": [[24, "persistence-handlers"]], "Defining Default Factories": [[24, "defining-default-factories"]], "Declaring Factories": [[25, "declaring-factories"]], "Imperative Factory Creation": [[25, "imperative-factory-creation"]], "Handling Custom Types": [[29, "handling-custom-types"]], "Creating Custom Base Factories": [[29, "creating-custom-base-factories"]], "dataclass_factory": [[7, "module-polyfactory.factories.dataclass_factory"]], "typed_dict_factory": [[11, "module-polyfactory.factories.typed_dict_factory"]], "Contributing": [[0, "contributing"]], "Setting up the environment": [[0, "setting-up-the-environment"]], "Code contributions": [[0, "code-contributions"]], "Workflow": [[0, "workflow"]], "Project documentation": [[0, "project-documentation"]], "Docs theme and appearance": [[0, "docs-theme-and-appearance"]], "Running the docs locally": [[0, "running-the-docs-locally"]], "Writing and editing docs": [[0, "writing-and-editing-docs"]], "Creating a new release": [[0, "creating-a-new-release"]], "beanie_odm_factory": [[6, "module-polyfactory.factories.beanie_odm_factory"]], "factories": [[8, "factories"]], "pydantic_factory": [[10, "module-polyfactory.factories.pydantic_factory"]], "constants": [[2, "constants"]], "Polyfactory": [[1, "polyfactory"]], "Installation": [[1, "installation"]], "Relation to Pydantic-Factories": [[1, "relation-to-pydantic-factories"]], "Example": [[1, "example"]], "decorators": [[3, "module-polyfactory.decorators"]], "base_factory": [[5, "module-polyfactory.factories.base"]], "odmantic_odm_factory": [[9, "module-polyfactory.factories.odmantic_odm_factory"]], "exceptions": [[4, "module-polyfactory.exceptions"]]}, "indexentries": {"module": [[2, "module-polyfactory.constants"], [3, "module-polyfactory.decorators"], [4, "module-polyfactory.exceptions"], [5, "module-polyfactory.factories.base"], [6, "module-polyfactory.factories.beanie_odm_factory"], [7, "module-polyfactory.factories.dataclass_factory"], [9, "module-polyfactory.factories.odmantic_odm_factory"], [10, "module-polyfactory.factories.pydantic_factory"], [11, "module-polyfactory.factories.typed_dict_factory"], [12, "module-polyfactory.field_meta"], [13, "module-polyfactory.fields"], [15, "module-polyfactory.persistence"], [16, "module-polyfactory.pytest_plugin"], [17, "module-polyfactory.value_generators.complex_types"], [18, "module-polyfactory.value_generators.constrained_collections"], [19, "module-polyfactory.value_generators.constrained_dates"], [20, "module-polyfactory.value_generators.constrained_numbers"], [21, "module-polyfactory.value_generators.constrained_strings"], [23, "module-polyfactory.value_generators.primitives"]], "polyfactory.constants": [[2, "module-polyfactory.constants"]], "__init__() (polyfactory.decorators.post_generated method)": [[3, "polyfactory.decorators.post_generated.__init__"]], "polyfactory.decorators": [[3, "module-polyfactory.decorators"]], "post_generated (class in polyfactory.decorators)": [[3, "polyfactory.decorators.post_generated"]], "configurationexception": [[4, "polyfactory.exceptions.ConfigurationException"]], "factoryexception": [[4, "polyfactory.exceptions.FactoryException"]], "missingbuildkwargexception": [[4, "polyfactory.exceptions.MissingBuildKwargException"]], "missingdependencyexception": [[4, "polyfactory.exceptions.MissingDependencyException"]], "parameterexception": [[4, "polyfactory.exceptions.ParameterException"]], "polyfactory.exceptions": [[4, "module-polyfactory.exceptions"]], "basefactory (class in polyfactory.factories.base)": [[5, "polyfactory.factories.base.BaseFactory"]], "batch() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.batch"]], "build() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.build"]], "create_async() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.create_async"]], "create_batch_async() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.create_batch_async"]], "create_batch_sync() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.create_batch_sync"]], "create_factory() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.create_factory"]], "create_sync() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.create_sync"]], "extract_field_build_parameters() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.extract_field_build_parameters"]], "get_field_value() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.get_field_value"]], "get_mock_value() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.get_mock_value"]], "get_model_fields() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.get_model_fields"]], "get_provider_map() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.get_provider_map"]], "is_batch_factory_type() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.is_batch_factory_type"]], "is_factory() (in module polyfactory.factories.base)": [[5, "polyfactory.factories.base.is_factory"]], "is_factory_type() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.is_factory_type"]], "is_ignored_type() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.is_ignored_type"]], "is_supported_type() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.is_supported_type"]], "polyfactory.factories.base": [[5, "module-polyfactory.factories.base"]], "process_kwargs() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.process_kwargs"]], "seed_random() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.seed_random"]], "should_set_field_value() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.should_set_field_value"]], "should_set_none_value() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.should_set_none_value"]], "beaniedocumentfactory (class in polyfactory.factories.beanie_odm_factory)": [[6, "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory"]], "beaniepersistencehandler (class in polyfactory.factories.beanie_odm_factory)": [[6, "polyfactory.factories.beanie_odm_factory.BeaniePersistenceHandler"]], "get_field_value() (polyfactory.factories.beanie_odm_factory.beaniedocumentfactory class method)": [[6, "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory.get_field_value"]], "is_supported_type() (polyfactory.factories.beanie_odm_factory.beaniedocumentfactory class method)": [[6, "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory.is_supported_type"]], "polyfactory.factories.beanie_odm_factory": [[6, "module-polyfactory.factories.beanie_odm_factory"]], "save() (polyfactory.factories.beanie_odm_factory.beaniepersistencehandler method)": [[6, "polyfactory.factories.beanie_odm_factory.BeaniePersistenceHandler.save"]], "save_many() (polyfactory.factories.beanie_odm_factory.beaniepersistencehandler method)": [[6, "polyfactory.factories.beanie_odm_factory.BeaniePersistenceHandler.save_many"]], "dataclassfactory (class in polyfactory.factories.dataclass_factory)": [[7, "polyfactory.factories.dataclass_factory.DataclassFactory"]], "get_model_fields() (polyfactory.factories.dataclass_factory.dataclassfactory class method)": [[7, "polyfactory.factories.dataclass_factory.DataclassFactory.get_model_fields"]], "is_supported_type() (polyfactory.factories.dataclass_factory.dataclassfactory class method)": [[7, "polyfactory.factories.dataclass_factory.DataclassFactory.is_supported_type"]], "polyfactory.factories.dataclass_factory": [[7, "module-polyfactory.factories.dataclass_factory"]], "odmanticmodelfactory (class in polyfactory.factories.odmantic_odm_factory)": [[9, "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory"]], "get_provider_map() (polyfactory.factories.odmantic_odm_factory.odmanticmodelfactory class method)": [[9, "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory.get_provider_map"]], "is_supported_type() (polyfactory.factories.odmantic_odm_factory.odmanticmodelfactory class method)": [[9, "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory.is_supported_type"]], "polyfactory.factories.odmantic_odm_factory": [[9, "module-polyfactory.factories.odmantic_odm_factory"]], "modelfactory (class in polyfactory.factories.pydantic_factory)": [[10, "polyfactory.factories.pydantic_factory.ModelFactory"]], "pydanticfieldmeta (class in polyfactory.factories.pydantic_factory)": [[10, "polyfactory.factories.pydantic_factory.PydanticFieldMeta"]], "build() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[10, "polyfactory.factories.pydantic_factory.ModelFactory.build"]], "from_model_field() (polyfactory.factories.pydantic_factory.pydanticfieldmeta class method)": [[10, "polyfactory.factories.pydantic_factory.PydanticFieldMeta.from_model_field"]], "get_model_fields() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[10, "polyfactory.factories.pydantic_factory.ModelFactory.get_model_fields"]], "is_custom_root_field() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[10, "polyfactory.factories.pydantic_factory.ModelFactory.is_custom_root_field"]], "is_pydantic_model() (in module polyfactory.factories.pydantic_factory)": [[10, "polyfactory.factories.pydantic_factory.is_pydantic_model"]], "is_supported_type() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[10, "polyfactory.factories.pydantic_factory.ModelFactory.is_supported_type"]], "polyfactory.factories.pydantic_factory": [[10, "module-polyfactory.factories.pydantic_factory"]], "should_set_field_value() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[10, "polyfactory.factories.pydantic_factory.ModelFactory.should_set_field_value"]], "typeddictfactory (class in polyfactory.factories.typed_dict_factory)": [[11, "polyfactory.factories.typed_dict_factory.TypedDictFactory"]], "get_model_fields() (polyfactory.factories.typed_dict_factory.typeddictfactory class method)": [[11, "polyfactory.factories.typed_dict_factory.TypedDictFactory.get_model_fields"]], "is_supported_type() (polyfactory.factories.typed_dict_factory.typeddictfactory class method)": [[11, "polyfactory.factories.typed_dict_factory.TypedDictFactory.is_supported_type"]], "polyfactory.factories.typed_dict_factory": [[11, "module-polyfactory.factories.typed_dict_factory"]], "constraints (class in polyfactory.field_meta)": [[12, "polyfactory.field_meta.Constraints"]], "fieldmeta (class in polyfactory.field_meta)": [[12, "polyfactory.field_meta.FieldMeta"]], "null (class in polyfactory.field_meta)": [[12, "polyfactory.field_meta.Null"]], "__init__() (polyfactory.field_meta.fieldmeta method)": [[12, "polyfactory.field_meta.FieldMeta.__init__"]], "from_type() (polyfactory.field_meta.fieldmeta class method)": [[12, "polyfactory.field_meta.FieldMeta.from_type"]], "polyfactory.field_meta": [[12, "module-polyfactory.field_meta"]], "type_args (polyfactory.field_meta.fieldmeta property)": [[12, "polyfactory.field_meta.FieldMeta.type_args"]], "fixture (class in polyfactory.fields)": [[13, "polyfactory.fields.Fixture"]], "ignore (class in polyfactory.fields)": [[13, "polyfactory.fields.Ignore"]], "postgenerated (class in polyfactory.fields)": [[13, "polyfactory.fields.PostGenerated"]], "require (class in polyfactory.fields)": [[13, "polyfactory.fields.Require"]], "use (class in polyfactory.fields)": [[13, "polyfactory.fields.Use"]], "wrappedcallable (class in polyfactory.fields)": [[13, "polyfactory.fields.WrappedCallable"]], "__init__() (polyfactory.fields.fixture method)": [[13, "polyfactory.fields.Fixture.__init__"]], "__init__() (polyfactory.fields.postgenerated method)": [[13, "polyfactory.fields.PostGenerated.__init__"]], "__init__() (polyfactory.fields.use method)": [[13, "polyfactory.fields.Use.__init__"]], "polyfactory.fields": [[13, "module-polyfactory.fields"]], "to_value() (polyfactory.fields.fixture method)": [[13, "polyfactory.fields.Fixture.to_value"]], "to_value() (polyfactory.fields.postgenerated method)": [[13, "polyfactory.fields.PostGenerated.to_value"]], "to_value() (polyfactory.fields.use method)": [[13, "polyfactory.fields.Use.to_value"]], "asyncpersistenceprotocol (class in polyfactory.persistence)": [[15, "polyfactory.persistence.AsyncPersistenceProtocol"]], "syncpersistenceprotocol (class in polyfactory.persistence)": [[15, "polyfactory.persistence.SyncPersistenceProtocol"]], "__init__() (polyfactory.persistence.asyncpersistenceprotocol method)": [[15, "polyfactory.persistence.AsyncPersistenceProtocol.__init__"]], "__init__() (polyfactory.persistence.syncpersistenceprotocol method)": [[15, "polyfactory.persistence.SyncPersistenceProtocol.__init__"]], "polyfactory.persistence": [[15, "module-polyfactory.persistence"]], "save() (polyfactory.persistence.asyncpersistenceprotocol method)": [[15, "polyfactory.persistence.AsyncPersistenceProtocol.save"]], "save() (polyfactory.persistence.syncpersistenceprotocol method)": [[15, "polyfactory.persistence.SyncPersistenceProtocol.save"]], "save_many() (polyfactory.persistence.asyncpersistenceprotocol method)": [[15, "polyfactory.persistence.AsyncPersistenceProtocol.save_many"]], "save_many() (polyfactory.persistence.syncpersistenceprotocol method)": [[15, "polyfactory.persistence.SyncPersistenceProtocol.save_many"]], "factoryfixture (class in polyfactory.pytest_plugin)": [[16, "polyfactory.pytest_plugin.FactoryFixture"]], "__init__() (polyfactory.pytest_plugin.factoryfixture method)": [[16, "polyfactory.pytest_plugin.FactoryFixture.__init__"]], "polyfactory.pytest_plugin": [[16, "module-polyfactory.pytest_plugin"]], "register_fixture() (in module polyfactory.pytest_plugin)": [[16, "polyfactory.pytest_plugin.register_fixture"]], "handle_collection_type() (in module polyfactory.value_generators.complex_types)": [[17, "polyfactory.value_generators.complex_types.handle_collection_type"]], "handle_complex_type() (in module polyfactory.value_generators.complex_types)": [[17, "polyfactory.value_generators.complex_types.handle_complex_type"]], "polyfactory.value_generators.complex_types": [[17, "module-polyfactory.value_generators.complex_types"]], "handle_constrained_collection() (in module polyfactory.value_generators.constrained_collections)": [[18, "polyfactory.value_generators.constrained_collections.handle_constrained_collection"]], "polyfactory.value_generators.constrained_collections": [[18, "module-polyfactory.value_generators.constrained_collections"]], "handle_constrained_date() (in module polyfactory.value_generators.constrained_dates)": [[19, "polyfactory.value_generators.constrained_dates.handle_constrained_date"]], "polyfactory.value_generators.constrained_dates": [[19, "module-polyfactory.value_generators.constrained_dates"]], "numbergeneratorprotocol (class in polyfactory.value_generators.constrained_numbers)": [[20, "polyfactory.value_generators.constrained_numbers.NumberGeneratorProtocol"]], "__call__() (polyfactory.value_generators.constrained_numbers.numbergeneratorprotocol method)": [[20, "polyfactory.value_generators.constrained_numbers.NumberGeneratorProtocol.__call__"]], "__init__() (polyfactory.value_generators.constrained_numbers.numbergeneratorprotocol method)": [[20, "polyfactory.value_generators.constrained_numbers.NumberGeneratorProtocol.__init__"]], "almost_equal_floats() (in module polyfactory.value_generators.constrained_numbers)": [[20, "polyfactory.value_generators.constrained_numbers.almost_equal_floats"]], "generate_constrained_number() (in module polyfactory.value_generators.constrained_numbers)": [[20, "polyfactory.value_generators.constrained_numbers.generate_constrained_number"]], "get_constrained_number_range() (in module polyfactory.value_generators.constrained_numbers)": [[20, "polyfactory.value_generators.constrained_numbers.get_constrained_number_range"]], "get_increment() (in module polyfactory.value_generators.constrained_numbers)": [[20, "polyfactory.value_generators.constrained_numbers.get_increment"]], "get_value_or_none() (in module polyfactory.value_generators.constrained_numbers)": [[20, "polyfactory.value_generators.constrained_numbers.get_value_or_none"]], "handle_constrained_decimal() (in module polyfactory.value_generators.constrained_numbers)": [[20, "polyfactory.value_generators.constrained_numbers.handle_constrained_decimal"]], "handle_constrained_float() (in module polyfactory.value_generators.constrained_numbers)": [[20, "polyfactory.value_generators.constrained_numbers.handle_constrained_float"]], "handle_constrained_int() (in module polyfactory.value_generators.constrained_numbers)": [[20, "polyfactory.value_generators.constrained_numbers.handle_constrained_int"]], "handle_decimal_length() (in module polyfactory.value_generators.constrained_numbers)": [[20, "polyfactory.value_generators.constrained_numbers.handle_decimal_length"]], "is_multiply_of_multiple_of_in_range() (in module polyfactory.value_generators.constrained_numbers)": [[20, "polyfactory.value_generators.constrained_numbers.is_multiply_of_multiple_of_in_range"]], "passes_pydantic_multiple_validator() (in module polyfactory.value_generators.constrained_numbers)": [[20, "polyfactory.value_generators.constrained_numbers.passes_pydantic_multiple_validator"]], "polyfactory.value_generators.constrained_numbers": [[20, "module-polyfactory.value_generators.constrained_numbers"]], "validate_max_digits() (in module polyfactory.value_generators.constrained_numbers)": [[20, "polyfactory.value_generators.constrained_numbers.validate_max_digits"]], "handle_constrained_string_or_bytes() (in module polyfactory.value_generators.constrained_strings)": [[21, "polyfactory.value_generators.constrained_strings.handle_constrained_string_or_bytes"]], "polyfactory.value_generators.constrained_strings": [[21, "module-polyfactory.value_generators.constrained_strings"]], "create_random_boolean() (in module polyfactory.value_generators.primitives)": [[23, "polyfactory.value_generators.primitives.create_random_boolean"]], "create_random_bytes() (in module polyfactory.value_generators.primitives)": [[23, "polyfactory.value_generators.primitives.create_random_bytes"]], "create_random_decimal() (in module polyfactory.value_generators.primitives)": [[23, "polyfactory.value_generators.primitives.create_random_decimal"]], "create_random_float() (in module polyfactory.value_generators.primitives)": [[23, "polyfactory.value_generators.primitives.create_random_float"]], "create_random_integer() (in module polyfactory.value_generators.primitives)": [[23, "polyfactory.value_generators.primitives.create_random_integer"]], "create_random_string() (in module polyfactory.value_generators.primitives)": [[23, "polyfactory.value_generators.primitives.create_random_string"]], "polyfactory.value_generators.primitives": [[23, "module-polyfactory.value_generators.primitives"]]}})