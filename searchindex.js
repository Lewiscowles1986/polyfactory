Search.setIndex({"docnames": ["contributing", "index", "reference/constants", "reference/exceptions", "reference/factories/base", "reference/factories/beanie_odm_factory", "reference/factories/dataclass_factory", "reference/factories/index", "reference/factories/odmantic_odm_factory", "reference/factories/pydantic_factory", "reference/factories/typed_dict_factory", "reference/field_meta", "reference/fields", "reference/index", "reference/persistence", "reference/pytest_plugin", "reference/value_generators/complex_types", "reference/value_generators/constrained_collections", "reference/value_generators/constrained_dates", "reference/value_generators/constrained_numbers", "reference/value_generators/constrained_strings", "reference/value_generators/index", "reference/value_generators/primitives", "usage/configuration", "usage/declaring_factories", "usage/fields", "usage/fixtures", "usage/handling_custom_types", "usage/index", "usage/library_factories"], "filenames": ["contributing.rst", "index.rst", "reference/constants.rst", "reference/exceptions.rst", "reference/factories/base.rst", "reference/factories/beanie_odm_factory.rst", "reference/factories/dataclass_factory.rst", "reference/factories/index.rst", "reference/factories/odmantic_odm_factory.rst", "reference/factories/pydantic_factory.rst", "reference/factories/typed_dict_factory.rst", "reference/field_meta.rst", "reference/fields.rst", "reference/index.rst", "reference/persistence.rst", "reference/pytest_plugin.rst", "reference/value_generators/complex_types.rst", "reference/value_generators/constrained_collections.rst", "reference/value_generators/constrained_dates.rst", "reference/value_generators/constrained_numbers.rst", "reference/value_generators/constrained_strings.rst", "reference/value_generators/index.rst", "reference/value_generators/primitives.rst", "usage/configuration.rst", "usage/declaring_factories.rst", "usage/fields.rst", "usage/fixtures.rst", "usage/handling_custom_types.rst", "usage/index.rst", "usage/library_factories.rst"], "titles": ["Contributing", "Polyfactory", "constants", "exceptions", "base_factory", "beanie_odm_factory", "dataclass_factory", "factories", "odmantic_odm_factory", "pydantic_factory", "typed_dict_factory", "field_meta", "fields", "API Reference", "persistence", "pytest_plugin", "complex_types", "constrained_collections", "constrained_dates", "constrained_numbers", "constrained_strings", "value_generators", "primitives", "Factory Configuration", "Declaring Factories", "Factory Fields", "Pytest fixtures", "Handling Custom Types", "Usage Guide", "Polyfactory Factories"], "terms": {"instal": [0, 3], "poetri": 0, "virtual": 0, "depend": [0, 3, 19, 29], "If": [0, 4, 9, 23], "you": [0, 23, 24, 25, 26, 27], "re": [0, 25], "work": [0, 1, 27], "need": [0, 23, 25, 27], "build": [0, 1, 3, 4, 5, 9, 12, 23, 24, 25, 26, 27], "extra": 0, "pre": 0, "commit": 0, "hook": 0, "fork": 0, "upstream": 0, "repositori": 0, "clone": 0, "": [0, 1, 4, 6, 9, 10, 11, 12, 19, 23, 25, 27], "make": [0, 25, 29], "whatev": 0, "chang": [0, 1], "addit": [0, 29], "wish": 0, "pleas": 0, "try": 0, "keep": 0, "your": [0, 27], "histori": 0, "clean": 0, "1": [0, 23, 25], "note": [0, 4, 5, 8], "100": 0, "test": [0, 9, 23], "ar": [0, 1, 3, 4, 9, 12, 19, 23, 24, 25, 26, 29], "mandatori": 0, "onc": [0, 23], "readi": 0, "add": [0, 19, 23, 27], "pr": 0, "main": [0, 1, 4], "repo": 0, "pull": 0, "request": 0, "an": [0, 4, 5, 6, 8, 9, 10, 12, 15, 18, 19, 20, 22, 23, 25, 27, 29], "explan": 0, "The": [0, 1, 12, 14, 19, 24, 27, 29], "suit": 0, "requir": [0, 1, 3, 12, 23, 29], "have": [0, 23], "instanc": [0, 4, 5, 6, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27], "mongodb": [0, 5], "avail": [0, 1], "can": [0, 1, 16, 17, 19, 23, 24, 25, 26, 27], "launch": 0, "one": [0, 19, 25], "us": [0, 1, 2, 3, 4, 5, 9, 11, 12, 15, 19, 23, 24, 26, 27], "root": 0, "level": 0, "docker": 0, "compos": 0, "config": 0, "detach": 0, "ani": [0, 4, 5, 6, 8, 9, 10, 11, 12, 15, 16, 17, 23, 24, 25, 27, 29], "other": [0, 4, 12, 23, 24, 25, 29], "mean": [0, 25], "i": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 19, 23, 24, 25, 26, 27], "locat": 0, "directori": 0, "built": [0, 16], "rest": 0, "sphinx": 0, "unfamiliar": 0, "those": 0, "restructuredtext": 0, "primer": 0, "quickstart": 0, "recommend": 0, "read": [0, 23], "we": [0, 1, 5, 23, 25, 26, 27, 29], "welcom": 0, "enhanc": 0, "improv": 0, "usabl": 0, "custom": [0, 1, 19, 25, 28], "inherit": 0, "pydata": 0, "which": [0, 1, 24, 25, 27], "come": 0, "lot": 0, "option": [0, 12, 15, 19, 23, 26, 29], "out": 0, "box": 0, "style": 0, "setup": 0, "static": 0, "site": 0, "gener": [0, 1, 4, 5, 6, 8, 9, 10, 12, 16, 17, 18, 19, 22, 23, 24, 25, 27], "should": [0, 4, 17, 23, 25], "consult": 0, "first": [0, 23], "step": 0, "To": [0, 23, 26, 27], "Then": 0, "serv": 0, "them": 0, "content": 0, "feel": 0, "free": 0, "exampl": [0, 20, 23, 24, 25, 26, 27], "clarifi": 0, "text": 0, "restructur": 0, "etc": [0, 23], "sure": [0, 29], "follow": 0, "guidelin": 0, "idiomat": 0, "english": 0, "simpl": [0, 1, 25], "languag": 0, "self": [0, 23, 27], "contain": [0, 11, 16], "provid": [0, 3, 25, 27], "link": 0, "where": [0, 25], "applic": 0, "intersphinx": 0, "wherev": 0, "possibl": [0, 1, 25], "when": [0, 3, 4, 9, 23, 25, 27], "referenc": 0, "extern": 0, "librari": [0, 1, 4, 23, 24, 25, 27, 29], "diagram": 0, "mermaidj": 0, "updat": 0, "changelog": 0, "md": 0, "increment": [0, 19], "version": [0, 1], "pyproject": 0, "toml": 0, "push": 0, "In": [0, 23, 25, 26, 27], "github": 0, "go": 0, "tab": 0, "pick": 0, "draft": 0, "give": [0, 25], "titl": 0, "tag": 0, "both": [0, 23], "vx": 0, "x": 0, "fill": 0, "descript": 0, "let": [0, 25], "do": [0, 23, 25, 27, 29], "publish": 0, "look": [0, 25], "under": [0, 1, 25], "action": 0, "pane": 0, "correctli": 0, "power": 1, "mock": [1, 4, 5, 23, 25, 27], "data": [1, 5, 11, 14, 23, 25], "base": [1, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 24, 25, 29], "around": 1, "type": [1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 15, 16, 17, 19, 20, 23, 24, 25, 26, 28, 29], "hint": 1, "support": [1, 4, 5, 6, 8, 9, 10, 23, 26], "dataclass": [1, 6, 23, 24, 25, 26, 27, 29], "dict": [1, 4, 8, 12, 23, 24, 25, 27, 29], "model": [1, 4, 6, 8, 9, 10, 11, 15, 23, 24, 29], "more": [1, 23], "pip": 1, "prior": 1, "2": [1, 25], "thi": [1, 2, 4, 8, 9, 11, 12, 23, 24, 25, 26, 27, 29], "wa": [1, 12], "known": 1, "name": [1, 4, 9, 11, 12, 15, 23, 24, 25, 26], "gain": 1, "quit": 1, "bit": 1, "popular": 1, "A": [1, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22], "motiv": 1, "0": [1, 23, 24, 25], "releas": 1, "want": 1, "than": [1, 18, 19, 25], "just": 1, "someth": 1, "also": [1, 23, 24, 26], "its": [1, 23, 25], "core": 1, "architectur": 1, "As": [1, 23, 26, 29], "would": 1, "longer": 1, "directli": [1, 25], "ti": 1, "chosen": 1, "new": [1, 4, 23], "reflect": 1, "capabl": [1, 9], "It": 1, "odmant": [1, 8, 29], "beani": [1, 5, 29], "odm": [1, 23], "well": [1, 23], "minim": [1, 17, 19, 23], "from": [1, 4, 5, 6, 9, 10, 11, 12, 15, 23, 24, 25, 26, 27, 29], "import": [1, 23, 24, 25, 26, 27], "dataclassfactori": [1, 6, 23, 24, 25, 26, 27, 29], "class": [1, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 19, 23, 24, 25, 26, 27, 29], "person": [1, 23, 24, 25, 26, 27], "str": [1, 4, 11, 12, 15, 20, 22, 23, 24, 25, 26, 27], "ag": [1, 23, 24, 25, 26], "float": [1, 19, 22, 23, 24, 25, 26], "height": [1, 23, 24], "weight": [1, 23, 24], "personfactori": [1, 23, 24, 25, 26, 27], "__model__": [1, 4, 9, 23, 24, 25, 26, 27], "def": [1, 23, 24, 25, 26, 27], "test_is_person": [1, 24], "none": [1, 4, 5, 11, 12, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27], "person_inst": [1, 23, 24, 25, 26, 27], "assert": [1, 23, 24, 25, 26, 27], "isinst": [1, 23, 24, 26, 27], "That": [1, 24], "almost": [1, 19], "abl": 1, "creat": [1, 5, 9, 11, 12, 15, 24], "object": [1, 11, 12, 15], "fit": 1, "definit": [1, 24], "becaus": [1, 5, 23, 26], "inform": 1, "sourc": 1, "truth": 1, "pars": 1, "store": [1, 11, 12, 16, 23], "dictionari": [1, 4, 8, 23, 25], "kwarg": [1, 3, 4, 5, 9, 12, 14, 19, 23, 25, 26], "pass": [1, 4, 5, 12, 19, 25], "constructor": [1, 19], "map": [2, 4, 8, 25, 27], "annot": [2, 4, 11], "concret": 2, "normal": [2, 11, 26], "python": [2, 19], "3": 2, "9": 2, "polyfactori": [3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28], "factoryexcept": 3, "factori": [3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 26, 28], "error": 3, "configurationexcept": 3, "configur": [3, 28], "misconfigur": 3, "parameterexcept": [3, 12], "paramet": [3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22], "wrong": 3, "missingbuildkwargexcept": [3, 25], "miss": 3, "missingdependencyexcept": 3, "importerror": 3, "is_factori": 4, "valu": [4, 5, 6, 8, 9, 10, 11, 12, 17, 18, 19, 20, 22, 23, 25, 27], "typeguard": [4, 5, 6, 8, 9, 10], "basefactori": [4, 6, 9, 10, 15, 16, 17, 23, 29], "determin": [4, 5, 6, 8, 9, 10, 19], "given": [4, 5, 6, 8, 9, 10, 12, 19, 22, 25], "subclass": [4, 5, 9, 24], "modelfactori": [4, 5, 8, 9, 24, 29], "arbitrari": [4, 5, 6, 8, 9, 10, 12], "return": [4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27], "boolean": [4, 9, 19, 22], "abc": [4, 29], "t": [4, 5, 6, 8, 9, 12, 14, 17, 19, 20, 27], "hold": 4, "logic": [4, 5, 23], "classmethod": [4, 5, 6, 8, 9, 10, 11, 23, 25, 27], "is_factory_typ": 4, "bool": [4, 9, 15, 17, 19, 20, 22], "whether": [4, 5, 6, 8, 9, 10, 17, 19, 20, 22], "field": [4, 5, 6, 9, 10, 11, 13, 16, 17, 23, 28], "dictat": [4, 19], "is_batch_factory_typ": 4, "sequenc": 4, "batch": [4, 12, 25, 26], "extract_field_build_paramet": 4, "field_meta": [4, 5, 6, 9, 10, 13, 16, 17, 19], "fieldmeta": [4, 5, 6, 9, 10, 11, 16, 17], "build_arg": 4, "extract": 4, "meta": [4, 9, 11, 16, 17], "abstract": [4, 25, 29], "is_supported_typ": [4, 5, 6, 8, 9, 10], "seed_random": 4, "seed": [4, 25], "int": [4, 12, 17, 19, 20, 22, 23, 24, 25, 26], "faker": [4, 18], "random": [4, 19, 20, 22, 25], "integ": [4, 19, 22], "set": [4, 9, 17], "is_ignored_typ": 4, "check": 4, "ignor": [4, 12], "method": [4, 5, 8, 11, 12, 19, 23, 24, 25, 26, 27], "meant": [4, 12, 24], "overwritten": 4, "extens": 4, "get_provider_map": [4, 8, 27], "callabl": [4, 8, 12, 17, 19, 20, 25, 26, 27], "distinct": [4, 8], "allow": [4, 8, 12, 15, 23, 25], "overrid": [4, 8, 27], "get_mock_valu": 4, "create_factori": [4, 24], "tupl": [4, 11, 19], "dynam": [4, 23, 24], "get_field_valu": [4, 5], "field_build_paramet": [4, 5], "exist": [4, 5], "otherwis": [4, 5], "should_set_none_valu": 4, "metadata": [4, 6, 9, 10, 11], "should_set_field_valu": 4, "field_nam": 4, "get_model_field": [4, 6, 9, 10], "list": [4, 5, 6, 9, 10, 11, 14, 17, 23, 24, 25, 26, 29], "retriev": [4, 6, 9, 10], "process_kwarg": 4, "process": [4, 23], "result": [4, 12, 14, 16, 20, 22, 23, 25, 26], "size": [4, 12, 23, 25, 26], "n": [4, 23], "create_sync": [4, 23], "persist": [4, 5, 13], "synchron": [4, 14, 23], "singl": [4, 5, 14, 23], "create_batch_sync": [4, 23], "async": [4, 5, 14, 23], "create_async": [4, 23], "asynchron": [4, 14, 23], "create_batch_async": [4, 23], "beaniepersistencehandl": 5, "asyncpersistenceprotocol": [5, 14, 23], "handler": 5, "save": [5, 14, 23], "save_mani": [5, 14, 23], "multipl": [5, 14, 19], "cannot": [5, 26, 27], "insert_mani": 5, "here": [5, 23], "doesn": 5, "beaniedocumentfactori": [5, 29], "document": [5, 23, 29], "base_factori": 7, "dataclass_factori": 7, "typed_dict_factori": 7, "beanie_odm_factori": 7, "odmantic_odm_factori": 7, "pydantic_factori": [7, 24, 29], "odmanticmodelfactori": [8, 29], "is_pydantic_model": 9, "basemodel": [9, 24], "guard": 9, "pydanticfieldmeta": 9, "handl": [9, 16, 19, 20, 28], "pydant": [9, 16, 19, 20, 24, 29], "modelfield": 9, "from_model_field": 9, "model_field": 9, "use_alia": 9, "alia": 9, "factory_use_construct": 9, "fals": [9, 15, 17, 20, 22], "valid": [9, 19, 25], "made": 9, "instanti": 9, "onli": [9, 23, 25, 29], "typeddictfactori": [10, 24, 25, 29], "typeddictt": 10, "typeddict": [10, 11, 12, 24, 25], "null": 11, "sentinel": 11, "empti": 11, "constraint": [11, 18, 19, 22], "regard": 11, "about": [11, 23], "__init__": [11, 12, 14, 15, 19, 27], "default": [11, 25, 27], "children": 11, "properti": 11, "type_arg": 11, "arg": [11, 12, 14, 19, 25], "from_typ": 11, "builder": 11, "wrappedcal": 12, "ref": 12, "util": 12, "prevent": 12, "bind": 12, "mark": 12, "attribut": [12, 23, 25], "time": [12, 25, 29], "p": 12, "wrap": [12, 26], "invok": [12, 25], "whenev": 12, "fn": 12, "to_valu": 12, "output": [12, 19], "postgener": 12, "after": 12, "design": [12, 25], "post": [12, 25], "callback": [12, 19], "fixtur": [12, 15, 28], "pytest": [12, 15, 25, 28], "regist": [12, 15, 26], "call": [12, 23, 25, 26], "rais": [12, 25], "constant": 13, "except": [13, 25], "pytest_plugin": [13, 26], "value_gener": [13, 16, 17, 18, 19, 20, 22], "syncpersistenceprotocol": [14, 23], "protocol": [14, 19], "sync": [14, 23, 25], "factoryfixtur": 15, "decor": [15, 24, 26], "scope": [15, 25], "function": [15, 19, 23, 25], "autous": 15, "register_fixtur": [15, 26], "auto": 15, "handle_container_typ": 16, "container_typ": 16, "recurs": 16, "accept": [16, 17, 26], "argument": [16, 17], "handle_complex_typ": 16, "info": 16, "graph": 16, "like": [16, 25], "structur": 16, "handle_constrained_collect": 17, "collection_typ": 17, "item_typ": 17, "max_item": 17, "min_item": 17, "unique_item": 17, "constrain": [17, 19, 20], "collect": 17, "item": 17, "maxim": [17, 19], "number": [17, 19], "uniqu": 17, "handle_constrained_d": 18, "ge": [18, 19], "date": [18, 23, 24, 25, 26], "gt": [18, 19], "le": [18, 19], "lt": [18, 19], "fulfil": [18, 24], "expect": 18, "less": [18, 19], "equal": [18, 19], "greater": [18, 19], "numbergeneratorprotocol": 19, "numer": 19, "__call__": 19, "minimum": [19, 20, 22], "maximum": [19, 20, 22], "signatur": [19, 25], "almost_equal_float": 19, "value_1": 19, "value_2": 19, "delta": [19, 25], "1e": 19, "08": 19, "true": [19, 23, 27], "two": 19, "consid": 19, "problemat": 19, "comparison": 19, "is_multiply_of_multiple_of_in_rang": 19, "multiple_of": 19, "least": 19, "multipli": 19, "li": 19, "rang": [19, 25], "between": 19, "passes_pydantic_multiple_valid": 19, "anoth": 19, "get_incr": 19, "t_type": [19, 20], "get": [19, 24, 25], "small": 19, "e": [19, 25, 29], "entri": 19, "get_value_or_non": 19, "equal_valu": 19, "get_constrained_number_rang": 19, "primit": [19, 21], "decim": [19, 22], "generate_constrained_numb": 19, "handle_constrained_int": 19, "handle_constrained_float": 19, "validate_max_digit": 19, "max_digit": 19, "decimal_plac": 19, "max": 19, "digit": 19, "place": [19, 23, 27], "handle_decimal_length": 19, "generated_decim": 19, "length": [19, 20, 22], "handle_constrained_decim": 19, "handle_constrained_string_or_byt": 20, "lower_cas": [20, 22], "upper_cas": [20, 22], "min_length": [20, 22], "max_length": [20, 22], "pattern": [20, 25], "string": [20, 22, 27], "byte": [20, 22], "constr": 20, "conbyt": 20, "lowercas": [20, 22], "uppercas": [20, 22], "regex": 20, "complex_typ": 21, "constrained_collect": 21, "constrained_d": 21, "constrained_numb": 21, "constrained_str": 21, "create_random_float": 22, "create_random_integ": 22, "create_random_decim": 22, "create_random_byt": 22, "create_random_str": 22, "create_random_boolean": 22, "special": [23, 27], "dunder": 23, "doubl": 23, "underscor": 23, "refer": [23, 27], "api": [23, 25], "below": [23, 24], "discuss": 23, "some": [23, 27], "depth": 23, "__random_seed__": 23, "__random__": [23, 25], "choic": [23, 25], "john": 23, "alic": 23, "georg": 23, "test_random_se": 23, "outcom": 23, "determinist": 23, "ha": [23, 25], "been": 23, "control": [23, 25, 26], "produc": 23, "affect": [23, 25], "all": [23, 25, 29], "10": 23, "test_setting_random": 23, "ident": 23, "previou": 23, "differ": 23, "being": [23, 25], "actual": 23, "embed": 23, "insid": [23, 24], "complex": 23, "__faker__": 23, "local": 23, "es_": 23, "cl": [23, 25, 27], "test_setting_fak": 23, "german": 23, "asunci\u00f3n": 23, "c\u00e9spede": 23, "abov": [23, 25, 26, 27, 29], "spanish": 23, "understand": [23, 25], "why": 23, "see": 23, "four": 23, "must": [23, 26], "specifi": 23, "asyncio": 23, "sleep": 23, "uuid": [23, 24, 25, 26, 27], "id": [23, 24, 25, 26, 27], "mock_db": 23, "syncpersistencehandl": 23, "stuff": 23, "orm": 23, "cach": 23, "redi": 23, "our": [23, 27], "case": [23, 25, 27, 29], "simpli": 23, "same": [23, 24], "asyncpersistencehandl": 23, "await": 23, "0001": 23, "again": 23, "__sync_persistence__": 23, "__async_persistence__": 23, "test_sync_persistence_build": 23, "test_sync_persistence_batch": 23, "person_batch": 23, "test_async_persistence_build": 23, "test_async_persistence_batch": 23, "With": 23, "now": [23, 25], "respect": [23, 29], "explain": 23, "section": 23, "declar": [23, 25, 26, 28], "intervent": 23, "user": [23, 24], "reus": 23, "For": [23, 24, 25], "petfactori": [23, 24, 25], "datetim": [23, 24, 25, 26], "enum": [23, 24, 25], "union": [23, 24, 25, 26], "speci": [23, 24, 25], "cat": [23, 24, 25], "dog": [23, 24, 25], "pet": [23, 24, 25], "sound": [23, 24, 25], "hobbi": [23, 24, 25, 26], "birthdai": [23, 24, 25, 26], "asset": [23, 24, 25], "test_dynamic_factory_gener": [23, 24], "len": [23, 24, 25, 26, 27], "__set_as_default_factory_for_type__": 23, "roxi": [23, 25], "spammi": 23, "mosh": 23, "test_default_pet_factori": 23, "defin": [24, 25], "done": 24, "syntax": 24, "appli": 24, "export": [24, 25, 29], "Or": [24, 25], "3rd": [24, 27], "parti": [24, 27], "implement": 24, "long": 24, "stdlib": [24, 25], "interfac": 24, "although": 24, "primarili": 24, "expos": 24, "intern": 24, "test_imperative_factory_cr": 24, "pet_factori": 24, "pet_inst": [24, 25], "semant": 25, "nonetheless": 25, "cover": 25, "few": 25, "hardcod": [25, 27], "woof": 25, "test_is_pet_inst": 25, "randomli": 25, "though": 25, "often": 25, "desir": 25, "could": 25, "instead": 25, "restrict": [25, 26], "ralph": 25, "test_pet_choic": 25, "mere": 25, "cleaner": 25, "simpler": 25, "fact": 25, "includ": [25, 29], "thu": 25, "write": 25, "so": [25, 27, 29], "lambda": [25, 27], "easi": 25, "nice": 25, "access": [25, 26], "itself": [25, 26], "intent": 25, "while": 25, "own": [25, 27], "attach": 25, "sever": 25, "wai": 25, "g": [25, 29], "consist": 25, "rather": 25, "global": 25, "complet": 25, "typing_extens": 25, "test_id_is_ignor": 25, "test_id_is_requir": 25, "alreadi": 25, "non": 25, "most": 25, "best": 25, "avoid": 25, "helper": 25, "timedelta": 25, "add_timedelta": 25, "dai": 25, "from_dt": 25, "datetimerang": 25, "to_dt": 25, "default_factori": 25, "datetimerangefactori": 25, "test_post_gener": 25, "date_range_inst": 25, "cb": 25, "receiv": 25, "register_fixture_decor": 26, "nick": 26, "test_person_factori": 26, "person_factori": 26, "overcom": 26, "separ": 26, "without": 26, "person_factory_fixtur": 26, "still": 26, "another_person_inst": 26, "alias": 26, "aliased_person_factori": 26, "classroom": 26, "teacher": 26, "pupil": 26, "classroomfactori": 26, "ludmilla": 26, "newman": 26, "20": 26, "test_fixture_field": 26, "classroom_inst": 26, "similar": 26, "propag": 26, "sometim": 27, "either": 27, "codebas": 27, "achiev": 27, "extend": [27, 29], "what": 27, "providers_map": 27, "code": 27, "customsecret": 27, "__repr__": 27, "__str__": 27, "secret": 27, "unknown": 27, "super": 27, "jeronimo": 27, "test_custom_secret_cr": 27, "repr": 27, "each": 27, "appropri": 27, "great": 27, "localis": 27, "fashion": 27, "mani": 27, "lead": 27, "unnecessari": 27, "duplic": 27, "solut": 27, "typevar": 27, "customdataclassfactori": 27, "__is_base_factory__": 27, "test_custom_dataclass_base_factori": 27, "These": 29, "thei": 29, "namespac": 29, "modul": 29, "ad": 29, "packag": 29, "checkout": 29}, "objects": {"polyfactory": [[2, 0, 0, "-", "constants"], [3, 0, 0, "-", "exceptions"], [11, 0, 0, "-", "field_meta"], [12, 0, 0, "-", "fields"], [14, 0, 0, "-", "persistence"], [15, 0, 0, "-", "pytest_plugin"]], "polyfactory.exceptions": [[3, 1, 1, "", "ConfigurationException"], [3, 1, 1, "", "FactoryException"], [3, 1, 1, "", "MissingBuildKwargException"], [3, 1, 1, "", "MissingDependencyException"], [3, 1, 1, "", "ParameterException"]], "polyfactory.factories": [[4, 0, 0, "-", "base"], [5, 0, 0, "-", "beanie_odm_factory"], [6, 0, 0, "-", "dataclass_factory"], [8, 0, 0, "-", "odmantic_odm_factory"], [9, 0, 0, "-", "pydantic_factory"], [10, 0, 0, "-", "typed_dict_factory"]], "polyfactory.factories.base": [[4, 2, 1, "", "BaseFactory"], [4, 4, 1, "", "is_factory"]], "polyfactory.factories.base.BaseFactory": [[4, 3, 1, "", "batch"], [4, 3, 1, "", "build"], [4, 3, 1, "", "create_async"], [4, 3, 1, "", "create_batch_async"], [4, 3, 1, "", "create_batch_sync"], [4, 3, 1, "", "create_factory"], [4, 3, 1, "", "create_sync"], [4, 3, 1, "", "extract_field_build_parameters"], [4, 3, 1, "", "get_field_value"], [4, 3, 1, "", "get_mock_value"], [4, 3, 1, "", "get_model_fields"], [4, 3, 1, "", "get_provider_map"], [4, 3, 1, "", "is_batch_factory_type"], [4, 3, 1, "", "is_factory_type"], [4, 3, 1, "", "is_ignored_type"], [4, 3, 1, "", "is_supported_type"], [4, 3, 1, "", "process_kwargs"], [4, 3, 1, "", "seed_random"], [4, 3, 1, "", "should_set_field_value"], [4, 3, 1, "", "should_set_none_value"]], "polyfactory.factories.beanie_odm_factory": [[5, 2, 1, "", "BeanieDocumentFactory"], [5, 2, 1, "", "BeaniePersistenceHandler"]], "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory": [[5, 3, 1, "", "get_field_value"], [5, 3, 1, "", "is_supported_type"]], "polyfactory.factories.beanie_odm_factory.BeaniePersistenceHandler": [[5, 3, 1, "", "save"], [5, 3, 1, "", "save_many"]], "polyfactory.factories.dataclass_factory": [[6, 2, 1, "", "DataclassFactory"]], "polyfactory.factories.dataclass_factory.DataclassFactory": [[6, 3, 1, "", "get_model_fields"], [6, 3, 1, "", "is_supported_type"]], "polyfactory.factories.odmantic_odm_factory": [[8, 2, 1, "", "OdmanticModelFactory"]], "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory": [[8, 3, 1, "", "get_provider_map"], [8, 3, 1, "", "is_supported_type"]], "polyfactory.factories.pydantic_factory": [[9, 2, 1, "", "ModelFactory"], [9, 2, 1, "", "PydanticFieldMeta"], [9, 4, 1, "", "is_pydantic_model"]], "polyfactory.factories.pydantic_factory.ModelFactory": [[9, 3, 1, "", "build"], [9, 3, 1, "", "get_model_fields"], [9, 3, 1, "", "is_supported_type"]], "polyfactory.factories.pydantic_factory.PydanticFieldMeta": [[9, 3, 1, "", "from_model_field"]], "polyfactory.factories.typed_dict_factory": [[10, 2, 1, "", "TypedDictFactory"]], "polyfactory.factories.typed_dict_factory.TypedDictFactory": [[10, 3, 1, "", "get_model_fields"], [10, 3, 1, "", "is_supported_type"]], "polyfactory.field_meta": [[11, 2, 1, "", "Constraints"], [11, 2, 1, "", "FieldMeta"], [11, 2, 1, "", "Null"]], "polyfactory.field_meta.FieldMeta": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "from_type"], [11, 5, 1, "", "type_args"]], "polyfactory.fields": [[12, 2, 1, "", "Fixture"], [12, 2, 1, "", "Ignore"], [12, 2, 1, "", "PostGenerated"], [12, 2, 1, "", "Require"], [12, 2, 1, "", "Use"], [12, 2, 1, "", "WrappedCallable"]], "polyfactory.fields.Fixture": [[12, 3, 1, "", "__init__"], [12, 3, 1, "", "to_value"]], "polyfactory.fields.PostGenerated": [[12, 3, 1, "", "__init__"], [12, 3, 1, "", "to_value"]], "polyfactory.fields.Use": [[12, 3, 1, "", "__init__"], [12, 3, 1, "", "to_value"]], "polyfactory.persistence": [[14, 2, 1, "", "AsyncPersistenceProtocol"], [14, 2, 1, "", "SyncPersistenceProtocol"]], "polyfactory.persistence.AsyncPersistenceProtocol": [[14, 3, 1, "", "__init__"], [14, 3, 1, "", "save"], [14, 3, 1, "", "save_many"]], "polyfactory.persistence.SyncPersistenceProtocol": [[14, 3, 1, "", "__init__"], [14, 3, 1, "", "save"], [14, 3, 1, "", "save_many"]], "polyfactory.pytest_plugin": [[15, 2, 1, "", "FactoryFixture"], [15, 4, 1, "", "register_fixture"]], "polyfactory.pytest_plugin.FactoryFixture": [[15, 3, 1, "", "__init__"]], "polyfactory.value_generators": [[16, 0, 0, "-", "complex_types"], [17, 0, 0, "-", "constrained_collections"], [18, 0, 0, "-", "constrained_dates"], [19, 0, 0, "-", "constrained_numbers"], [20, 0, 0, "-", "constrained_strings"], [22, 0, 0, "-", "primitives"]], "polyfactory.value_generators.complex_types": [[16, 4, 1, "", "handle_complex_type"], [16, 4, 1, "", "handle_container_type"]], "polyfactory.value_generators.constrained_collections": [[17, 4, 1, "", "handle_constrained_collection"]], "polyfactory.value_generators.constrained_dates": [[18, 4, 1, "", "handle_constrained_date"]], "polyfactory.value_generators.constrained_numbers": [[19, 2, 1, "", "NumberGeneratorProtocol"], [19, 4, 1, "", "almost_equal_floats"], [19, 4, 1, "", "generate_constrained_number"], [19, 4, 1, "", "get_constrained_number_range"], [19, 4, 1, "", "get_increment"], [19, 4, 1, "", "get_value_or_none"], [19, 4, 1, "", "handle_constrained_decimal"], [19, 4, 1, "", "handle_constrained_float"], [19, 4, 1, "", "handle_constrained_int"], [19, 4, 1, "", "handle_decimal_length"], [19, 4, 1, "", "is_multiply_of_multiple_of_in_range"], [19, 4, 1, "", "passes_pydantic_multiple_validator"], [19, 4, 1, "", "validate_max_digits"]], "polyfactory.value_generators.constrained_numbers.NumberGeneratorProtocol": [[19, 3, 1, "", "__call__"], [19, 3, 1, "", "__init__"]], "polyfactory.value_generators.constrained_strings": [[20, 4, 1, "", "handle_constrained_string_or_bytes"]], "polyfactory.value_generators.primitives": [[22, 4, 1, "", "create_random_boolean"], [22, 4, 1, "", "create_random_bytes"], [22, 4, 1, "", "create_random_decimal"], [22, 4, 1, "", "create_random_float"], [22, 4, 1, "", "create_random_integer"], [22, 4, 1, "", "create_random_string"]]}, "objtypes": {"0": "py:module", "1": "py:exception", "2": "py:class", "3": "py:method", "4": "py:function", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "exception", "Python exception"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"], "5": ["py", "property", "Python property"]}, "titleterms": {"contribut": 0, "set": [0, 23], "up": 0, "environ": 0, "code": 0, "workflow": 0, "project": 0, "document": 0, "doc": 0, "theme": 0, "appear": 0, "run": 0, "local": 0, "write": 0, "edit": 0, "creat": [0, 27], "new": 0, "releas": 0, "polyfactori": [1, 29], "instal": 1, "relat": 1, "pydant": 1, "factori": [1, 7, 23, 24, 25, 27, 29], "exampl": 1, "constant": 2, "except": 3, "base_factori": 4, "beanie_odm_factori": 5, "dataclass_factori": 6, "odmantic_odm_factori": 8, "pydantic_factori": 9, "typed_dict_factori": 10, "field_meta": 11, "field": [12, 25, 26], "api": 13, "refer": 13, "persist": [14, 23], "pytest_plugin": 15, "complex_typ": 16, "constrained_collect": 17, "constrained_d": 18, "constrained_numb": 19, "constrained_str": 20, "value_gener": 21, "primit": 22, "configur": 23, "seed": 23, "random": 23, "faker": 23, "handler": 23, "defin": 23, "default": 23, "declar": 24, "imper": 24, "creation": 24, "The": [25, 26], "us": 25, "ignor": 25, "requir": 25, "postgener": 25, "pytest": 26, "fixtur": 26, "handl": 27, "custom": 27, "type": 27, "base": 27, "usag": 28, "guid": 28}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"constrained_strings": [[20, "module-polyfactory.value_generators.constrained_strings"]], "pytest_plugin": [[15, "module-polyfactory.pytest_plugin"]], "constrained_collections": [[17, "module-polyfactory.value_generators.constrained_collections"]], "Factory Configuration": [[23, "factory-configuration"]], "Seeding Randomness": [[23, "seeding-randomness"]], "Setting Random": [[23, "setting-random"]], "Setting Faker": [[23, "setting-faker"]], "Persistence Handlers": [[23, "persistence-handlers"]], "Defining Default Factories": [[23, "defining-default-factories"]], "value_generators": [[21, "value-generators"]], "API Reference": [[13, "api-reference"]], "constrained_dates": [[18, "module-polyfactory.value_generators.constrained_dates"]], "constrained_numbers": [[19, "module-polyfactory.value_generators.constrained_numbers"]], "complex_types": [[16, "module-polyfactory.value_generators.complex_types"]], "primitives": [[22, "module-polyfactory.value_generators.primitives"]], "fields": [[12, "module-polyfactory.fields"]], "persistence": [[14, "module-polyfactory.persistence"]], "Pytest fixtures": [[26, "pytest-fixtures"]], "The Fixture Field": [[26, "the-fixture-field"]], "Declaring Factories": [[24, "declaring-factories"]], "Imperative Factory Creation": [[24, "imperative-factory-creation"]], "Handling Custom Types": [[27, "handling-custom-types"]], "Creating Custom Base Factories": [[27, "creating-custom-base-factories"]], "Polyfactory Factories": [[29, "polyfactory-factories"]], "Usage Guide": [[28, "usage-guide"]], "Factory Fields": [[25, "factory-fields"]], "The Use Field": [[25, "the-use-field"]], "The Ignore Field": [[25, "the-ignore-field"]], "The Require Field": [[25, "the-require-field"]], "The PostGenerated Field": [[25, "the-postgenerated-field"]], "typed_dict_factory": [[10, "module-polyfactory.factories.typed_dict_factory"]], "field_meta": [[11, "module-polyfactory.field_meta"]], "Contributing": [[0, "contributing"]], "Setting up the environment": [[0, "setting-up-the-environment"]], "Code contributions": [[0, "code-contributions"]], "Workflow": [[0, "workflow"]], "Project documentation": [[0, "project-documentation"]], "Docs theme and appearance": [[0, "docs-theme-and-appearance"]], "Running the docs locally": [[0, "running-the-docs-locally"]], "Writing and editing docs": [[0, "writing-and-editing-docs"]], "Creating a new release": [[0, "creating-a-new-release"]], "base_factory": [[4, "module-polyfactory.factories.base"]], "beanie_odm_factory": [[5, "module-polyfactory.factories.beanie_odm_factory"]], "exceptions": [[3, "module-polyfactory.exceptions"]], "constants": [[2, "constants"]], "dataclass_factory": [[6, "module-polyfactory.factories.dataclass_factory"]], "odmantic_odm_factory": [[8, "module-polyfactory.factories.odmantic_odm_factory"]], "factories": [[7, "factories"]], "pydantic_factory": [[9, "module-polyfactory.factories.pydantic_factory"]], "Polyfactory": [[1, "polyfactory"]], "Installation": [[1, "installation"]], "Relation to Pydantic-Factories": [[1, "relation-to-pydantic-factories"]], "Example": [[1, "example"]]}, "indexentries": {"module": [[2, "module-polyfactory.constants"], [3, "module-polyfactory.exceptions"], [4, "module-polyfactory.factories.base"], [5, "module-polyfactory.factories.beanie_odm_factory"], [6, "module-polyfactory.factories.dataclass_factory"], [8, "module-polyfactory.factories.odmantic_odm_factory"], [9, "module-polyfactory.factories.pydantic_factory"], [10, "module-polyfactory.factories.typed_dict_factory"], [11, "module-polyfactory.field_meta"], [12, "module-polyfactory.fields"], [14, "module-polyfactory.persistence"], [15, "module-polyfactory.pytest_plugin"], [16, "module-polyfactory.value_generators.complex_types"], [17, "module-polyfactory.value_generators.constrained_collections"], [18, "module-polyfactory.value_generators.constrained_dates"], [19, "module-polyfactory.value_generators.constrained_numbers"], [20, "module-polyfactory.value_generators.constrained_strings"], [22, "module-polyfactory.value_generators.primitives"]], "polyfactory.constants": [[2, "module-polyfactory.constants"]], "configurationexception": [[3, "polyfactory.exceptions.ConfigurationException"]], "factoryexception": [[3, "polyfactory.exceptions.FactoryException"]], "missingbuildkwargexception": [[3, "polyfactory.exceptions.MissingBuildKwargException"]], "missingdependencyexception": [[3, "polyfactory.exceptions.MissingDependencyException"]], "parameterexception": [[3, "polyfactory.exceptions.ParameterException"]], "polyfactory.exceptions": [[3, "module-polyfactory.exceptions"]], "basefactory (class in polyfactory.factories.base)": [[4, "polyfactory.factories.base.BaseFactory"]], "batch() (polyfactory.factories.base.basefactory class method)": [[4, "polyfactory.factories.base.BaseFactory.batch"]], "build() (polyfactory.factories.base.basefactory class method)": [[4, "polyfactory.factories.base.BaseFactory.build"]], "create_async() (polyfactory.factories.base.basefactory class method)": [[4, "polyfactory.factories.base.BaseFactory.create_async"]], "create_batch_async() (polyfactory.factories.base.basefactory class method)": [[4, "polyfactory.factories.base.BaseFactory.create_batch_async"]], "create_batch_sync() (polyfactory.factories.base.basefactory class method)": [[4, "polyfactory.factories.base.BaseFactory.create_batch_sync"]], "create_factory() (polyfactory.factories.base.basefactory class method)": [[4, "polyfactory.factories.base.BaseFactory.create_factory"]], "create_sync() (polyfactory.factories.base.basefactory class method)": [[4, "polyfactory.factories.base.BaseFactory.create_sync"]], "extract_field_build_parameters() (polyfactory.factories.base.basefactory class method)": [[4, "polyfactory.factories.base.BaseFactory.extract_field_build_parameters"]], "get_field_value() (polyfactory.factories.base.basefactory class method)": [[4, "polyfactory.factories.base.BaseFactory.get_field_value"]], "get_mock_value() (polyfactory.factories.base.basefactory class method)": [[4, "polyfactory.factories.base.BaseFactory.get_mock_value"]], "get_model_fields() (polyfactory.factories.base.basefactory class method)": [[4, "polyfactory.factories.base.BaseFactory.get_model_fields"]], "get_provider_map() (polyfactory.factories.base.basefactory class method)": [[4, "polyfactory.factories.base.BaseFactory.get_provider_map"]], "is_batch_factory_type() (polyfactory.factories.base.basefactory class method)": [[4, "polyfactory.factories.base.BaseFactory.is_batch_factory_type"]], "is_factory() (in module polyfactory.factories.base)": [[4, "polyfactory.factories.base.is_factory"]], "is_factory_type() (polyfactory.factories.base.basefactory class method)": [[4, "polyfactory.factories.base.BaseFactory.is_factory_type"]], "is_ignored_type() (polyfactory.factories.base.basefactory class method)": [[4, "polyfactory.factories.base.BaseFactory.is_ignored_type"]], "is_supported_type() (polyfactory.factories.base.basefactory class method)": [[4, "polyfactory.factories.base.BaseFactory.is_supported_type"]], "polyfactory.factories.base": [[4, "module-polyfactory.factories.base"]], "process_kwargs() (polyfactory.factories.base.basefactory class method)": [[4, "polyfactory.factories.base.BaseFactory.process_kwargs"]], "seed_random() (polyfactory.factories.base.basefactory class method)": [[4, "polyfactory.factories.base.BaseFactory.seed_random"]], "should_set_field_value() (polyfactory.factories.base.basefactory class method)": [[4, "polyfactory.factories.base.BaseFactory.should_set_field_value"]], "should_set_none_value() (polyfactory.factories.base.basefactory class method)": [[4, "polyfactory.factories.base.BaseFactory.should_set_none_value"]], "beaniedocumentfactory (class in polyfactory.factories.beanie_odm_factory)": [[5, "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory"]], "beaniepersistencehandler (class in polyfactory.factories.beanie_odm_factory)": [[5, "polyfactory.factories.beanie_odm_factory.BeaniePersistenceHandler"]], "get_field_value() (polyfactory.factories.beanie_odm_factory.beaniedocumentfactory class method)": [[5, "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory.get_field_value"]], "is_supported_type() (polyfactory.factories.beanie_odm_factory.beaniedocumentfactory class method)": [[5, "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory.is_supported_type"]], "polyfactory.factories.beanie_odm_factory": [[5, "module-polyfactory.factories.beanie_odm_factory"]], "save() (polyfactory.factories.beanie_odm_factory.beaniepersistencehandler method)": [[5, "polyfactory.factories.beanie_odm_factory.BeaniePersistenceHandler.save"]], "save_many() (polyfactory.factories.beanie_odm_factory.beaniepersistencehandler method)": [[5, "polyfactory.factories.beanie_odm_factory.BeaniePersistenceHandler.save_many"]], "dataclassfactory (class in polyfactory.factories.dataclass_factory)": [[6, "polyfactory.factories.dataclass_factory.DataclassFactory"]], "get_model_fields() (polyfactory.factories.dataclass_factory.dataclassfactory class method)": [[6, "polyfactory.factories.dataclass_factory.DataclassFactory.get_model_fields"]], "is_supported_type() (polyfactory.factories.dataclass_factory.dataclassfactory class method)": [[6, "polyfactory.factories.dataclass_factory.DataclassFactory.is_supported_type"]], "polyfactory.factories.dataclass_factory": [[6, "module-polyfactory.factories.dataclass_factory"]], "odmanticmodelfactory (class in polyfactory.factories.odmantic_odm_factory)": [[8, "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory"]], "get_provider_map() (polyfactory.factories.odmantic_odm_factory.odmanticmodelfactory class method)": [[8, "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory.get_provider_map"]], "is_supported_type() (polyfactory.factories.odmantic_odm_factory.odmanticmodelfactory class method)": [[8, "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory.is_supported_type"]], "polyfactory.factories.odmantic_odm_factory": [[8, "module-polyfactory.factories.odmantic_odm_factory"]], "modelfactory (class in polyfactory.factories.pydantic_factory)": [[9, "polyfactory.factories.pydantic_factory.ModelFactory"]], "pydanticfieldmeta (class in polyfactory.factories.pydantic_factory)": [[9, "polyfactory.factories.pydantic_factory.PydanticFieldMeta"]], "build() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[9, "polyfactory.factories.pydantic_factory.ModelFactory.build"]], "from_model_field() (polyfactory.factories.pydantic_factory.pydanticfieldmeta class method)": [[9, "polyfactory.factories.pydantic_factory.PydanticFieldMeta.from_model_field"]], "get_model_fields() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[9, "polyfactory.factories.pydantic_factory.ModelFactory.get_model_fields"]], "is_pydantic_model() (in module polyfactory.factories.pydantic_factory)": [[9, "polyfactory.factories.pydantic_factory.is_pydantic_model"]], "is_supported_type() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[9, "polyfactory.factories.pydantic_factory.ModelFactory.is_supported_type"]], "polyfactory.factories.pydantic_factory": [[9, "module-polyfactory.factories.pydantic_factory"]], "typeddictfactory (class in polyfactory.factories.typed_dict_factory)": [[10, "polyfactory.factories.typed_dict_factory.TypedDictFactory"]], "get_model_fields() (polyfactory.factories.typed_dict_factory.typeddictfactory class method)": [[10, "polyfactory.factories.typed_dict_factory.TypedDictFactory.get_model_fields"]], "is_supported_type() (polyfactory.factories.typed_dict_factory.typeddictfactory class method)": [[10, "polyfactory.factories.typed_dict_factory.TypedDictFactory.is_supported_type"]], "polyfactory.factories.typed_dict_factory": [[10, "module-polyfactory.factories.typed_dict_factory"]], "constraints (class in polyfactory.field_meta)": [[11, "polyfactory.field_meta.Constraints"]], "fieldmeta (class in polyfactory.field_meta)": [[11, "polyfactory.field_meta.FieldMeta"]], "null (class in polyfactory.field_meta)": [[11, "polyfactory.field_meta.Null"]], "__init__() (polyfactory.field_meta.fieldmeta method)": [[11, "polyfactory.field_meta.FieldMeta.__init__"]], "from_type() (polyfactory.field_meta.fieldmeta class method)": [[11, "polyfactory.field_meta.FieldMeta.from_type"]], "polyfactory.field_meta": [[11, "module-polyfactory.field_meta"]], "type_args (polyfactory.field_meta.fieldmeta property)": [[11, "polyfactory.field_meta.FieldMeta.type_args"]], "fixture (class in polyfactory.fields)": [[12, "polyfactory.fields.Fixture"]], "ignore (class in polyfactory.fields)": [[12, "polyfactory.fields.Ignore"]], "postgenerated (class in polyfactory.fields)": [[12, "polyfactory.fields.PostGenerated"]], "require (class in polyfactory.fields)": [[12, "polyfactory.fields.Require"]], "use (class in polyfactory.fields)": [[12, "polyfactory.fields.Use"]], "wrappedcallable (class in polyfactory.fields)": [[12, "polyfactory.fields.WrappedCallable"]], "__init__() (polyfactory.fields.fixture method)": [[12, "polyfactory.fields.Fixture.__init__"]], "__init__() (polyfactory.fields.postgenerated method)": [[12, "polyfactory.fields.PostGenerated.__init__"]], "__init__() (polyfactory.fields.use method)": [[12, "polyfactory.fields.Use.__init__"]], "polyfactory.fields": [[12, "module-polyfactory.fields"]], "to_value() (polyfactory.fields.fixture method)": [[12, "polyfactory.fields.Fixture.to_value"]], "to_value() (polyfactory.fields.postgenerated method)": [[12, "polyfactory.fields.PostGenerated.to_value"]], "to_value() (polyfactory.fields.use method)": [[12, "polyfactory.fields.Use.to_value"]], "asyncpersistenceprotocol (class in polyfactory.persistence)": [[14, "polyfactory.persistence.AsyncPersistenceProtocol"]], "syncpersistenceprotocol (class in polyfactory.persistence)": [[14, "polyfactory.persistence.SyncPersistenceProtocol"]], "__init__() (polyfactory.persistence.asyncpersistenceprotocol method)": [[14, "polyfactory.persistence.AsyncPersistenceProtocol.__init__"]], "__init__() (polyfactory.persistence.syncpersistenceprotocol method)": [[14, "polyfactory.persistence.SyncPersistenceProtocol.__init__"]], "polyfactory.persistence": [[14, "module-polyfactory.persistence"]], "save() (polyfactory.persistence.asyncpersistenceprotocol method)": [[14, "polyfactory.persistence.AsyncPersistenceProtocol.save"]], "save() (polyfactory.persistence.syncpersistenceprotocol method)": [[14, "polyfactory.persistence.SyncPersistenceProtocol.save"]], "save_many() (polyfactory.persistence.asyncpersistenceprotocol method)": [[14, "polyfactory.persistence.AsyncPersistenceProtocol.save_many"]], "save_many() (polyfactory.persistence.syncpersistenceprotocol method)": [[14, "polyfactory.persistence.SyncPersistenceProtocol.save_many"]], "factoryfixture (class in polyfactory.pytest_plugin)": [[15, "polyfactory.pytest_plugin.FactoryFixture"]], "__init__() (polyfactory.pytest_plugin.factoryfixture method)": [[15, "polyfactory.pytest_plugin.FactoryFixture.__init__"]], "polyfactory.pytest_plugin": [[15, "module-polyfactory.pytest_plugin"]], "register_fixture() (in module polyfactory.pytest_plugin)": [[15, "polyfactory.pytest_plugin.register_fixture"]], "handle_complex_type() (in module polyfactory.value_generators.complex_types)": [[16, "polyfactory.value_generators.complex_types.handle_complex_type"]], "handle_container_type() (in module polyfactory.value_generators.complex_types)": [[16, "polyfactory.value_generators.complex_types.handle_container_type"]], "polyfactory.value_generators.complex_types": [[16, "module-polyfactory.value_generators.complex_types"]], "handle_constrained_collection() (in module polyfactory.value_generators.constrained_collections)": [[17, "polyfactory.value_generators.constrained_collections.handle_constrained_collection"]], "polyfactory.value_generators.constrained_collections": [[17, "module-polyfactory.value_generators.constrained_collections"]], "handle_constrained_date() (in module polyfactory.value_generators.constrained_dates)": [[18, "polyfactory.value_generators.constrained_dates.handle_constrained_date"]], "polyfactory.value_generators.constrained_dates": [[18, "module-polyfactory.value_generators.constrained_dates"]], "numbergeneratorprotocol (class in polyfactory.value_generators.constrained_numbers)": [[19, "polyfactory.value_generators.constrained_numbers.NumberGeneratorProtocol"]], "__call__() (polyfactory.value_generators.constrained_numbers.numbergeneratorprotocol method)": [[19, "polyfactory.value_generators.constrained_numbers.NumberGeneratorProtocol.__call__"]], "__init__() (polyfactory.value_generators.constrained_numbers.numbergeneratorprotocol method)": [[19, "polyfactory.value_generators.constrained_numbers.NumberGeneratorProtocol.__init__"]], "almost_equal_floats() (in module polyfactory.value_generators.constrained_numbers)": [[19, "polyfactory.value_generators.constrained_numbers.almost_equal_floats"]], "generate_constrained_number() (in module polyfactory.value_generators.constrained_numbers)": [[19, "polyfactory.value_generators.constrained_numbers.generate_constrained_number"]], "get_constrained_number_range() (in module polyfactory.value_generators.constrained_numbers)": [[19, "polyfactory.value_generators.constrained_numbers.get_constrained_number_range"]], "get_increment() (in module polyfactory.value_generators.constrained_numbers)": [[19, "polyfactory.value_generators.constrained_numbers.get_increment"]], "get_value_or_none() (in module polyfactory.value_generators.constrained_numbers)": [[19, "polyfactory.value_generators.constrained_numbers.get_value_or_none"]], "handle_constrained_decimal() (in module polyfactory.value_generators.constrained_numbers)": [[19, "polyfactory.value_generators.constrained_numbers.handle_constrained_decimal"]], "handle_constrained_float() (in module polyfactory.value_generators.constrained_numbers)": [[19, "polyfactory.value_generators.constrained_numbers.handle_constrained_float"]], "handle_constrained_int() (in module polyfactory.value_generators.constrained_numbers)": [[19, "polyfactory.value_generators.constrained_numbers.handle_constrained_int"]], "handle_decimal_length() (in module polyfactory.value_generators.constrained_numbers)": [[19, "polyfactory.value_generators.constrained_numbers.handle_decimal_length"]], "is_multiply_of_multiple_of_in_range() (in module polyfactory.value_generators.constrained_numbers)": [[19, "polyfactory.value_generators.constrained_numbers.is_multiply_of_multiple_of_in_range"]], "passes_pydantic_multiple_validator() (in module polyfactory.value_generators.constrained_numbers)": [[19, "polyfactory.value_generators.constrained_numbers.passes_pydantic_multiple_validator"]], "polyfactory.value_generators.constrained_numbers": [[19, "module-polyfactory.value_generators.constrained_numbers"]], "validate_max_digits() (in module polyfactory.value_generators.constrained_numbers)": [[19, "polyfactory.value_generators.constrained_numbers.validate_max_digits"]], "handle_constrained_string_or_bytes() (in module polyfactory.value_generators.constrained_strings)": [[20, "polyfactory.value_generators.constrained_strings.handle_constrained_string_or_bytes"]], "polyfactory.value_generators.constrained_strings": [[20, "module-polyfactory.value_generators.constrained_strings"]], "create_random_boolean() (in module polyfactory.value_generators.primitives)": [[22, "polyfactory.value_generators.primitives.create_random_boolean"]], "create_random_bytes() (in module polyfactory.value_generators.primitives)": [[22, "polyfactory.value_generators.primitives.create_random_bytes"]], "create_random_decimal() (in module polyfactory.value_generators.primitives)": [[22, "polyfactory.value_generators.primitives.create_random_decimal"]], "create_random_float() (in module polyfactory.value_generators.primitives)": [[22, "polyfactory.value_generators.primitives.create_random_float"]], "create_random_integer() (in module polyfactory.value_generators.primitives)": [[22, "polyfactory.value_generators.primitives.create_random_integer"]], "create_random_string() (in module polyfactory.value_generators.primitives)": [[22, "polyfactory.value_generators.primitives.create_random_string"]], "polyfactory.value_generators.primitives": [[22, "module-polyfactory.value_generators.primitives"]]}})