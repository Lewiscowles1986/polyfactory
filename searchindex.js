Search.setIndex({"docnames": ["contributing", "index", "reference/constants", "reference/decorators", "reference/exceptions", "reference/factories/attrs_factory", "reference/factories/base", "reference/factories/beanie_odm_factory", "reference/factories/dataclass_factory", "reference/factories/index", "reference/factories/msgspec_factory", "reference/factories/odmantic_odm_factory", "reference/factories/pydantic_factory", "reference/factories/typed_dict_factory", "reference/field_meta", "reference/fields", "reference/index", "reference/persistence", "reference/pytest_plugin", "reference/value_generators/complex_types", "reference/value_generators/constrained_collections", "reference/value_generators/constrained_dates", "reference/value_generators/constrained_numbers", "reference/value_generators/constrained_strings", "reference/value_generators/index", "reference/value_generators/primitives", "usage/configuration", "usage/declaring_factories", "usage/decorators", "usage/fields", "usage/fixtures", "usage/handling_custom_types", "usage/index", "usage/library_factories"], "filenames": ["contributing.rst", "index.rst", "reference/constants.rst", "reference/decorators.rst", "reference/exceptions.rst", "reference/factories/attrs_factory.rst", "reference/factories/base.rst", "reference/factories/beanie_odm_factory.rst", "reference/factories/dataclass_factory.rst", "reference/factories/index.rst", "reference/factories/msgspec_factory.rst", "reference/factories/odmantic_odm_factory.rst", "reference/factories/pydantic_factory.rst", "reference/factories/typed_dict_factory.rst", "reference/field_meta.rst", "reference/fields.rst", "reference/index.rst", "reference/persistence.rst", "reference/pytest_plugin.rst", "reference/value_generators/complex_types.rst", "reference/value_generators/constrained_collections.rst", "reference/value_generators/constrained_dates.rst", "reference/value_generators/constrained_numbers.rst", "reference/value_generators/constrained_strings.rst", "reference/value_generators/index.rst", "reference/value_generators/primitives.rst", "usage/configuration.rst", "usage/declaring_factories.rst", "usage/decorators.rst", "usage/fields.rst", "usage/fixtures.rst", "usage/handling_custom_types.rst", "usage/index.rst", "usage/library_factories.rst"], "titles": ["Contributing", "Polyfactory", "constants", "decorators", "exceptions", "attrs_factory", "base_factory", "beanie_odm_factory", "dataclass_factory", "factories", "msgspec_factory", "odmantic_odm_factory", "pydantic_factory", "typed_dict_factory", "field_meta", "fields", "API Reference", "persistence", "pytest_plugin", "complex_types", "constrained_collections", "constrained_dates", "constrained_numbers", "constrained_strings", "value_generators", "primitives", "Factory Configuration", "Declaring Factories", "The <code class=\"docutils literal notranslate\"><span class=\"pre\">post_generated</span></code> decorator", "Factory Fields", "Pytest fixtures", "Handling Custom Types", "Usage Guide", "Polyfactory Factories"], "terms": {"instal": [0, 4], "poetri": 0, "extra": 0, "full": 0, "virtual": 0, "depend": [0, 4, 22, 28, 33], "If": [0, 6, 12, 26], "you": [0, 26, 27, 29, 30, 31], "re": [0, 29], "work": [0, 1, 31], "need": [0, 26, 29, 31], "build": [0, 1, 4, 6, 7, 12, 15, 26, 27, 28, 29, 30, 31], "pre": 0, "commit": 0, "hook": 0, "fork": 0, "upstream": 0, "repositori": 0, "clone": 0, "": [0, 1, 5, 6, 8, 10, 12, 13, 14, 15, 22, 26, 29, 31], "make": [0, 29, 33], "whatev": 0, "chang": [0, 1], "addit": [0, 33], "wish": 0, "pleas": 0, "try": 0, "keep": 0, "your": [0, 31], "histori": 0, "clean": 0, "1": [0, 26, 29], "note": [0, 6, 7, 10, 11], "100": 0, "test": [0, 26], "ar": [0, 1, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 22, 26, 27, 29, 30, 33], "mandatori": 0, "onc": [0, 26], "readi": 0, "add": [0, 22, 26, 31], "pr": 0, "main": [0, 1, 6], "repo": 0, "pull": 0, "request": 0, "an": [0, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 21, 22, 23, 25, 26, 27, 29, 31, 33], "explan": 0, "The": [0, 1, 6, 12, 15, 17, 22, 27, 31, 32, 33], "titl": 0, "should": [0, 6, 12, 20, 26, 29], "follow": 0, "convent": 0, "i": [0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 22, 26, 27, 28, 29, 30, 31], "locat": 0, "directori": 0, "built": [0, 19, 27], "rest": 0, "sphinx": 0, "unfamiliar": 0, "ani": [0, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 19, 20, 26, 27, 29, 31, 33], "those": 0, "restructuredtext": 0, "primer": 0, "quickstart": 0, "recommend": 0, "read": [0, 26], "we": [0, 1, 7, 26, 29, 30, 31, 33], "welcom": 0, "enhanc": 0, "improv": 0, "usabl": 0, "us": [0, 1, 2, 4, 6, 7, 12, 14, 15, 18, 22, 26, 27, 28, 30, 31], "custom": [0, 1, 12, 22, 27, 29, 32], "inherit": 0, "pydata": 0, "which": [0, 1, 27, 29, 31], "come": [0, 27], "lot": 0, "option": [0, 6, 15, 18, 22, 30, 33], "out": 0, "box": 0, "style": 0, "setup": 0, "static": 0, "site": 0, "gener": [0, 1, 6, 7, 8, 10, 11, 12, 13, 15, 19, 20, 21, 22, 25, 26, 27, 28, 29, 31], "consult": 0, "first": [0, 26], "step": 0, "To": [0, 26, 30, 31], "requir": [0, 1, 4, 6, 15, 26, 33], "Then": 0, "can": [0, 1, 6, 19, 20, 22, 26, 27, 29, 30, 31], "serv": 0, "them": 0, "content": 0, "feel": 0, "free": 0, "exampl": [0, 5, 6, 7, 8, 10, 11, 12, 13, 23, 26, 27, 28, 29, 30, 31], "clarifi": 0, "text": 0, "restructur": 0, "etc": [0, 26], "sure": [0, 33], "guidelin": 0, "idiomat": 0, "english": 0, "simpl": [0, 1, 29], "languag": 0, "self": [0, 14, 18, 26, 31], "contain": [0, 14, 19], "provid": [0, 4, 6, 29, 31], "link": 0, "where": [0, 29], "applic": 0, "intersphinx": 0, "wherev": 0, "possibl": [0, 1, 29], "when": [0, 4, 6, 12, 26, 28, 29, 31], "referenc": 0, "extern": 0, "librari": [0, 1, 6, 26, 27, 29, 31, 33], "diagram": 0, "mermaidj": 0, "updat": 0, "changelog": 0, "md": 0, "increment": [0, 22], "version": [0, 1], "pyproject": 0, "toml": 0, "push": 0, "In": [0, 26, 29, 30, 31], "github": 0, "go": 0, "tab": 0, "pick": 0, "draft": 0, "give": [0, 29], "tag": 0, "both": [0, 26], "vx": 0, "x": 0, "fill": 0, "descript": 0, "let": [0, 29], "do": [0, 26, 29, 31, 33], "publish": 0, "look": [0, 29], "under": [0, 1, 29], "action": 0, "pane": 0, "correctli": 0, "power": 1, "mock": [1, 6, 7, 26, 29, 31], "data": [1, 7, 14, 17, 26, 29], "base": [1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 22, 27, 29, 33], "around": 1, "type": [1, 2, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 19, 20, 22, 23, 26, 27, 28, 29, 30, 32, 33], "hint": 1, "support": [1, 5, 6, 7, 8, 10, 11, 12, 13, 26, 27, 30], "dataclass": [1, 8, 26, 27, 28, 29, 30, 31, 33], "dict": [1, 6, 10, 11, 12, 15, 26, 27, 29, 31, 33], "model": [1, 5, 6, 8, 10, 11, 12, 13, 14, 18, 26, 27, 33], "msgspec": [1, 10, 33], "struct": [1, 10, 33], "more": [1, 26], "pip": 1, "prior": 1, "2": [1, 26, 29], "thi": [1, 2, 6, 10, 11, 12, 14, 15, 26, 27, 28, 29, 30, 31, 33], "wa": [1, 15], "known": 1, "name": [1, 6, 12, 14, 15, 18, 26, 27, 28, 29, 30], "gain": 1, "quit": 1, "bit": 1, "popular": 1, "A": [1, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25], "motiv": 1, "0": [1, 6, 12, 14, 26, 27, 29], "releas": 1, "want": 1, "than": [1, 21, 22, 29], "just": 1, "someth": 1, "also": [1, 26, 27, 30], "its": [1, 6, 26, 28, 29], "core": 1, "architectur": 1, "As": [1, 26, 30, 33], "would": 1, "longer": 1, "directli": [1, 29], "ti": 1, "chosen": [1, 26], "new": [1, 6, 26], "reflect": 1, "capabl": [1, 12], "It": 1, "odmant": [1, 11, 33], "beani": [1, 7, 33], "odm": [1, 26], "well": [1, 26], "minim": [1, 20, 22, 26], "from": [1, 5, 6, 7, 8, 10, 12, 13, 14, 15, 18, 26, 27, 28, 29, 30, 31, 33], "import": [1, 26, 27, 28, 29, 30, 31], "dataclassfactori": [1, 5, 6, 7, 8, 10, 11, 12, 13, 26, 27, 28, 29, 30, 31, 33], "class": [1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 22, 26, 27, 28, 29, 30, 31, 33], "person": [1, 26, 27, 29, 30, 31], "str": [1, 6, 12, 14, 15, 18, 23, 25, 26, 27, 29, 30, 31], "ag": [1, 26, 27, 29, 30], "float": [1, 22, 25, 26, 27, 29, 30], "height": [1, 26, 27], "weight": [1, 26, 27], "personfactori": [1, 26, 27, 29, 30, 31], "__model__": [1, 6, 12, 26, 27, 28, 29, 30, 31], "def": [1, 26, 27, 28, 29, 30, 31], "test_is_person": [1, 27], "none": [1, 3, 6, 7, 12, 14, 15, 18, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31], "person_inst": [1, 26, 27, 29, 30, 31], "assert": [1, 26, 27, 28, 29, 30, 31], "isinst": [1, 26, 27, 30, 31], "That": [1, 27], "almost": [1, 22], "abl": 1, "creat": [1, 7, 12, 14, 15, 18, 27], "object": [1, 3, 6, 12, 14, 15, 18], "fit": 1, "definit": [1, 27], "becaus": [1, 7, 26, 30], "inform": 1, "avail": 1, "sourc": 1, "truth": 1, "pars": 1, "store": [1, 14, 15, 26], "dictionari": [1, 6, 10, 11, 14, 26, 29], "kwarg": [1, 4, 6, 7, 12, 15, 17, 22, 26, 29, 30], "pass": [1, 6, 7, 12, 15, 22, 29], "constructor": [1, 22], "map": [2, 6, 10, 11, 20, 29, 31], "annot": [2, 6, 12, 14], "concret": 2, "normal": [2, 14, 30], "python": [2, 22], "3": [2, 28], "9": 2, "polyfactori": [3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32], "post_gener": [3, 32], "descriptor": 3, "wrap": [3, 15, 26, 28, 30], "classmethod": [3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 26, 28, 29, 31], "postgener": [3, 15, 28], "field": [3, 5, 6, 7, 8, 10, 12, 13, 14, 16, 19, 20, 26, 27, 28, 32], "__init__": [3, 12, 14, 15, 17, 18, 22, 31], "method": [3, 6, 7, 10, 11, 14, 15, 22, 26, 27, 29, 30, 31], "union": [3, 18, 26, 27, 29, 30], "callabl": [3, 6, 10, 11, 15, 18, 20, 22, 23, 29, 30, 31], "factoryexcept": 4, "factori": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 28, 30, 32], "error": 4, "configurationexcept": 4, "configur": [4, 32], "misconfigur": 4, "parameterexcept": [4, 15], "paramet": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 28], "wrong": 4, "missingbuildkwargexcept": [4, 29], "miss": 4, "missingdependencyexcept": 4, "importerror": 4, "attrsfactori": [5, 27, 33], "basefactori": [5, 6, 8, 10, 12, 13, 18, 19, 20, 26, 33], "t": [5, 6, 7, 8, 10, 11, 12, 15, 17, 20, 22, 23, 31], "attr": [5, 27, 33], "__is_base_factory__": [5, 6, 7, 8, 10, 11, 12, 13, 31], "bool": [5, 6, 7, 8, 10, 11, 12, 13, 14, 18, 20, 22, 23, 25], "true": [5, 6, 7, 8, 10, 11, 12, 13, 22, 26, 31], "flag": [5, 6, 7, 8, 10, 11, 12, 13, 14], "dictat": [5, 6, 7, 8, 10, 11, 12, 13, 22], "whether": [5, 6, 7, 8, 10, 11, 12, 13, 14, 20, 22, 23, 25], "regist": [5, 6, 7, 8, 10, 11, 12, 13, 15, 18, 30], "global": [5, 6, 7, 8, 10, 11, 12, 13, 29], "handler": [5, 6, 7, 8, 10, 11, 12, 13], "For": [5, 6, 7, 8, 10, 11, 12, 13, 26, 27, 28, 29], "typeddictfactori": [5, 6, 7, 8, 10, 11, 12, 13, 27, 29, 33], "modelfactori": [5, 6, 7, 8, 10, 11, 12, 13, 27, 33], "all": [5, 6, 7, 8, 10, 11, 12, 13, 26, 28, 29, 33], "is_supported_typ": [5, 6, 7, 8, 10, 11, 12, 13], "valu": [5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 25, 26, 29, 31], "typeguard": [5, 6, 7, 8, 10, 11, 12, 13], "determin": [5, 6, 7, 8, 10, 11, 12, 13, 22], "given": [5, 6, 7, 8, 10, 11, 12, 13, 15, 22, 25, 29], "arbitrari": [5, 6, 7, 8, 10, 11, 12, 13, 15], "return": [5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 31], "get_model_field": [5, 6, 8, 10, 12, 13], "list": [5, 6, 7, 8, 10, 12, 13, 14, 17, 20, 26, 27, 29, 30, 33], "field_meta": [5, 6, 7, 8, 10, 12, 13, 16, 19, 20, 22], "fieldmeta": [5, 6, 7, 8, 10, 12, 13, 14, 19, 20], "retriev": [5, 6, 8, 10, 12, 13], "metadata": [5, 6, 8, 10, 12, 13, 14], "instanc": [5, 6, 7, 8, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29, 31], "abc": [6, 33], "hold": 6, "logic": [6, 7, 26], "attribut": [6, 15, 26, 28, 29], "non": [6, 29], "except": [6, 16, 29], "rais": [6, 15, 29], "set": [6, 12, 20], "__allow_none_optionals__": [6, 26], "classvar": 6, "allow": [6, 10, 11, 15, 18, 29], "randomli": [6, 26, 29], "__sync_persistence__": [6, 26], "syncpersistenceprotocol": [6, 17, 26], "sync": [6, 17, 26, 29], "persist": [6, 7, 16], "__async_persistence__": [6, 7, 26], "asyncpersistenceprotocol": [6, 7, 17, 26], "async": [6, 7, 17, 26], "__set_as_default_factory_for_type__": [6, 26], "fals": [6, 12, 14, 18, 20, 23, 25, 26], "default": [6, 12, 14, 29, 31], "instead": [6, 29], "dynam": [6, 26, 27], "__base_factory_overrides__": 6, "overrid": [6, 10, 11, 12, 31], "replac": 6, "onli": [6, 12, 26, 29, 33], "__faker__": [6, 26, 28], "faker": [6, 21], "proxi": 6, "user": [6, 26, 27], "__random__": [6, 26, 28, 29], "random": [6, 12, 14, 22, 23, 25, 29], "__random_seed__": [6, 26], "int": [6, 12, 14, 15, 20, 22, 23, 25, 26, 27, 29, 30], "integ": [6, 22, 25], "seed": [6, 29], "control": [6, 26, 29, 30], "__randomize_collection_length__": [6, 26], "collect": [6, 12, 14, 20], "length": [6, 12, 14, 22, 23, 25], "__min_collection_length__": [6, 26], "defin": [6, 27, 29], "minimum": [6, 12, 14, 22, 23, 25], "__max_collection_length__": [6, 26], "5": [6, 12, 14, 26], "maximum": [6, 12, 14, 22, 23, 25], "is_factory_typ": 6, "boolean": [6, 12, 14, 22, 25], "is_batch_factory_typ": 6, "sequenc": 6, "batch": [6, 15, 29, 30], "extract_field_build_paramet": 6, "build_arg": 6, "extract": 6, "meta": [6, 12, 14, 19, 20], "abstract": [6, 29, 33], "seed_random": 6, "is_ignored_typ": 6, "check": 6, "ignor": [6, 15], "meant": [6, 15, 27], "overwritten": 6, "extens": 6, "other": [6, 15, 26, 27, 29, 33], "subclass": [6, 7, 12, 27], "get_provider_map": [6, 10, 11, 31], "distinct": [6, 10, 11], "create_factori": [6, 27], "tupl": [6, 14, 22, 26], "get_field_valu": [6, 7], "field_build_paramet": [6, 7], "exist": [6, 7], "otherwis": [6, 7], "should_set_none_valu": 6, "should_set_field_valu": [6, 12], "field_nam": [6, 12], "process_kwarg": 6, "process": [6, 26], "result": [6, 15, 17, 19, 23, 25, 26, 29, 30], "size": [6, 15, 26, 29, 30], "n": [6, 26], "create_sync": [6, 26], "synchron": [6, 17, 26], "singl": [6, 7, 17, 26], "create_batch_sync": [6, 26], "create_async": [6, 26], "asynchron": [6, 17, 26], "create_batch_async": [6, 26], "beaniepersistencehandl": 7, "save": [7, 17, 26], "mongodb": 7, "save_mani": [7, 17, 26], "multipl": [7, 17, 22], "cannot": [7, 30, 31], "insert_mani": 7, "here": [7, 26], "doesn": 7, "beaniedocumentfactori": [7, 33], "document": [7, 26, 33], "alia": [7, 12, 27], "base_factori": 9, "dataclass_factori": [9, 26], "typed_dict_factori": 9, "pydantic_factori": [9, 27, 33], "msgspec_factori": 9, "odmantic_odm_factori": 9, "beanie_odm_factori": 9, "attrs_factori": [9, 27], "msgspecfactori": [10, 33], "odmanticmodelfactori": [11, 33], "pydanticconstraint": 12, "regard": [12, 14], "pydant": [12, 22, 23, 27, 33], "constraint": [12, 14, 21, 22, 25], "pydanticfieldmeta": 12, "handl": [12, 19, 22, 23, 32], "modelfield": 12, "ellipsi": 12, "children": [12, 14], "from_field_info": 12, "field_info": 12, "fieldinfo": 12, "use_alia": 12, "randomize_collection_length": [12, 14], "min_collection_length": [12, 14], "max_collection_length": [12, 14], "info": 12, "from_model_field": 12, "model_field": 12, "param": 12, "number": [12, 14, 20, 22], "element": [12, 14], "factory_use_construct": 12, "valid": [12, 22, 27, 29], "made": 12, "instanti": 12, "is_custom_root_field": 12, "root": 12, "typeddictt": 13, "typeddict": [13, 14, 15, 27, 29], "null": 14, "sentinel": 14, "empti": 14, "urlconstraint": 14, "about": [14, 26], "properti": 14, "type_arg": 14, "arg": [14, 15, 17, 22, 29], "from_typ": 14, "builder": 14, "wrappedcal": 15, "ref": 15, "util": 15, "prevent": 15, "bind": 15, "mark": [15, 26], "time": [15, 29, 33], "p": 15, "invok": [15, 29], "whenev": 15, "fn": 15, "to_valu": 15, "output": [15, 22, 26], "after": [15, 28], "design": [15, 29], "post": [15, 28, 29], "callback": [15, 22], "fixtur": [15, 18, 32], "pytest": [15, 18, 29, 32], "call": [15, 18, 26, 29, 30], "constant": 16, "decor": [16, 18, 27, 30, 32], "pytest_plugin": [16, 30], "value_gener": [16, 19, 20, 21, 22, 23, 25], "protocol": [17, 22], "factoryfixtur": 18, "scope": [18, 29], "liter": 18, "session": 18, "packag": [18, 33], "modul": [18, 33], "function": [18, 22, 26, 29], "config": 18, "autous": 18, "__call__": [18, 22], "register_fixtur": [18, 30], "auto": 18, "handle_collection_typ": 19, "container_typ": 19, "recurs": 19, "accept": [19, 20, 30], "argument": [19, 20], "handle_constrained_collect": 20, "collection_typ": 20, "item_typ": 20, "max_item": 20, "min_item": 20, "unique_item": 20, "constrain": [20, 22, 23], "item": [20, 26], "maxim": [20, 22], "uniqu": 20, "handle_constrained_map": 20, "handle_constrained_d": 21, "ge": [21, 22], "date": [21, 26, 27, 29, 30], "gt": [21, 22], "le": [21, 22], "lt": [21, 22], "tz": 21, "tzinfo": 21, "datetim": [21, 26, 27, 28, 29, 30], "timezon": 21, "utc": 21, "fulfil": [21, 27], "expect": 21, "less": [21, 22], "equal": [21, 22], "greater": [21, 22], "numbergeneratorprotocol": 22, "numer": 22, "signatur": [22, 29], "almost_equal_float": 22, "value_1": 22, "value_2": 22, "delta": [22, 29], "1e": 22, "08": 22, "two": 22, "consid": 22, "problemat": 22, "comparison": 22, "is_multiply_of_multiple_of_in_rang": 22, "multiple_of": 22, "least": 22, "one": [22, 26, 29], "multipli": 22, "li": 22, "rang": [22, 29], "between": [22, 26], "passes_pydantic_multiple_valid": 22, "anoth": 22, "get_incr": 22, "t_type": [22, 23], "get": [22, 27, 29], "small": 22, "e": [22, 29, 33], "entri": 22, "get_value_or_non": 22, "equal_valu": 22, "get_constrained_number_rang": 22, "primit": [22, 24], "decim": [22, 25], "generate_constrained_numb": 22, "handle_constrained_int": 22, "handle_constrained_float": 22, "validate_max_digit": 22, "max_digit": 22, "decimal_plac": 22, "max": 22, "digit": 22, "place": [22, 26, 31], "handle_decimal_length": 22, "generated_decim": 22, "handle_constrained_decim": 22, "handle_constrained_string_or_byt": 23, "lower_cas": [23, 25], "upper_cas": [23, 25], "min_length": [23, 25], "max_length": [23, 25], "pattern": [23, 29], "string": [23, 25, 31], "byte": [23, 25], "constr": 23, "conbyt": 23, "lowercas": [23, 25], "uppercas": [23, 25], "regex": 23, "complex_typ": 24, "constrained_collect": 24, "constrained_d": 24, "constrained_numb": 24, "constrained_str": 24, "create_random_float": 25, "create_random_integ": 25, "create_random_decim": 25, "create_random_byt": 25, "create_random_str": 25, "create_random_boolean": 25, "special": [26, 31], "dunder": 26, "doubl": 26, "underscor": 26, "refer": [26, 31], "api": [26, 29], "below": [26, 27], "discuss": 26, "some": [26, 31], "depth": 26, "cl": [26, 28, 29, 31], "choic": [26, 29], "john": 26, "alic": 26, "georg": 26, "test_random_se": 26, "outcom": 26, "determinist": 26, "ha": [26, 29], "been": 26, "produc": 26, "affect": [26, 29], "10": 26, "test_setting_random": 26, "ident": 26, "previou": 26, "differ": 26, "being": [26, 29], "actual": 26, "embed": 26, "insid": [26, 27], "complex": 26, "local": 26, "es_": 26, "test_setting_fak": 26, "spanish": 26, "alejandra": 26, "romeu": 26, "tolosa": 26, "abov": [26, 29, 30, 31, 33], "understand": [26, 29], "why": 26, "see": 26, "have": 26, "four": 26, "must": [26, 28, 30], "specifi": 26, "asyncio": 26, "sleep": 26, "uuid": [26, 27, 29, 30, 31], "id": [26, 27, 29, 30, 31], "mock_db": 26, "syncpersistencehandl": 26, "stuff": 26, "orm": 26, "cach": 26, "redi": 26, "our": [26, 31], "case": [26, 29, 31, 33], "simpli": 26, "same": [26, 27], "asyncpersistencehandl": 26, "await": 26, "0001": 26, "again": 26, "test_sync_persistence_build": 26, "test_sync_persistence_batch": 26, "person_batch": 26, "test_async_persistence_build": 26, "test_async_persistence_batch": 26, "With": 26, "now": [26, 28, 29], "respect": [26, 33], "explain": 26, "section": 26, "declar": [26, 29, 30, 32], "intervent": 26, "reus": 26, "petfactori": [26, 27, 29], "enum": [26, 27, 29], "speci": [26, 27, 29], "cat": [26, 27, 29], "dog": [26, 27, 29], "pet": [26, 27, 29], "sound": [26, 27, 29], "hobbi": [26, 27, 29, 30], "birthdai": [26, 27, 29, 30], "asset": [26, 27, 29], "test_dynamic_factory_gener": [26, 27], "len": [26, 27, 29, 30, 31], "roxi": [26, 29], "spammi": 26, "mosh": 26, "test_default_pet_factori": 26, "By": 26, "owner": 26, "car": 26, "ownerfactori": 26, "test_randomized_collection_length": 26, "alwai": 26, "treat": 26, "disabl": 26, "test_optional_type_ignor": 26, "done": 27, "syntax": 27, "appli": 27, "export": [27, 29, 33], "Or": [27, 29], "basemodel": 27, "3rd": [27, 31], "parti": [27, 31], "implement": 27, "long": 27, "stdlib": [27, 29], "interfac": 27, "alias": [27, 30], "variabl": 27, "date_of_birth": 27, "privat": 27, "_asset": 27, "test_person_factori": [27, 30], "current": [27, 28], "neither": 27, "nor": 27, "although": 27, "primarili": 27, "expos": 27, "intern": 27, "test_imperative_factory_cr": 27, "pet_factori": 27, "pet_inst": [27, 29], "usual": 28, "timedelta": [28, 29], "cast": 28, "datetimerang": [28, 29], "to_dt": [28, 29], "from_dt": [28, 29], "default_factori": [28, 29], "datetimerangefactori": [28, 29], "time_delta": 28, "3d": 28, "test_post_gener": [28, 29], "date_range_inst": [28, 29], "dai": [28, 29], "semant": 29, "nonetheless": 29, "cover": 29, "few": 29, "hardcod": [29, 31], "woof": 29, "test_is_pet_inst": 29, "though": 29, "often": 29, "desir": 29, "could": 29, "restrict": [29, 30], "like": 29, "ralph": 29, "test_pet_choic": 29, "mere": 29, "cleaner": 29, "simpler": 29, "fact": 29, "includ": [29, 33], "thu": 29, "write": 29, "so": [29, 31, 33], "lambda": [29, 31], "easi": 29, "nice": 29, "access": [29, 30], "itself": [29, 30], "intent": 29, "while": 29, "own": [29, 31], "attach": 29, "sever": 29, "wai": 29, "g": [29, 33], "consist": 29, "rather": 29, "mean": 29, "complet": 29, "test_id_is_ignor": 29, "test_id_is_requir": 29, "alreadi": 29, "most": 29, "best": 29, "avoid": 29, "helper": 29, "add_timedelta": 29, "cb": 29, "receiv": 29, "register_fixture_decor": 30, "nick": 30, "person_factori": 30, "overcom": 30, "separ": 30, "without": 30, "person_factory_fixtur": 30, "still": 30, "another_person_inst": 30, "aliased_person_factori": 30, "classroom": 30, "teacher": 30, "pupil": 30, "classroomfactori": 30, "ludmilla": 30, "newman": 30, "20": 30, "test_fixture_field": 30, "classroom_inst": 30, "similar": 30, "propag": 30, "sometim": 31, "either": 31, "codebas": 31, "achiev": 31, "extend": [31, 33], "what": 31, "providers_map": 31, "code": 31, "customsecret": 31, "__repr__": 31, "__str__": 31, "secret": 31, "unknown": 31, "super": 31, "jeronimo": 31, "test_custom_secret_cr": 31, "repr": 31, "each": 31, "appropri": 31, "great": 31, "localis": 31, "fashion": 31, "mani": 31, "lead": 31, "unnecessari": 31, "duplic": 31, "solut": 31, "typevar": 31, "customdataclassfactori": 31, "test_custom_dataclass_base_factori": 31, "These": 33, "thei": 33, "namespac": 33, "ad": 33, "checkout": 33}, "objects": {"polyfactory": [[2, 0, 0, "-", "constants"], [3, 0, 0, "-", "decorators"], [4, 0, 0, "-", "exceptions"], [14, 0, 0, "-", "field_meta"], [15, 0, 0, "-", "fields"], [17, 0, 0, "-", "persistence"], [18, 0, 0, "-", "pytest_plugin"]], "polyfactory.decorators": [[3, 1, 1, "", "post_generated"]], "polyfactory.decorators.post_generated": [[3, 2, 1, "", "__init__"]], "polyfactory.exceptions": [[4, 3, 1, "", "ConfigurationException"], [4, 3, 1, "", "FactoryException"], [4, 3, 1, "", "MissingBuildKwargException"], [4, 3, 1, "", "MissingDependencyException"], [4, 3, 1, "", "ParameterException"]], "polyfactory.factories": [[5, 0, 0, "-", "attrs_factory"], [6, 0, 0, "-", "base"], [7, 0, 0, "-", "beanie_odm_factory"], [8, 0, 0, "-", "dataclass_factory"], [10, 0, 0, "-", "msgspec_factory"], [11, 0, 0, "-", "odmantic_odm_factory"], [12, 0, 0, "-", "pydantic_factory"], [13, 0, 0, "-", "typed_dict_factory"]], "polyfactory.factories.attrs_factory": [[5, 1, 1, "", "AttrsFactory"]], "polyfactory.factories.attrs_factory.AttrsFactory": [[5, 4, 1, "", "__is_base_factory__"], [5, 2, 1, "", "get_model_fields"], [5, 2, 1, "", "is_supported_type"]], "polyfactory.factories.base": [[6, 1, 1, "", "BaseFactory"]], "polyfactory.factories.base.BaseFactory": [[6, 4, 1, "", "__allow_none_optionals__"], [6, 4, 1, "", "__async_persistence__"], [6, 4, 1, "", "__base_factory_overrides__"], [6, 4, 1, "", "__faker__"], [6, 4, 1, "", "__is_base_factory__"], [6, 4, 1, "", "__max_collection_length__"], [6, 4, 1, "", "__min_collection_length__"], [6, 4, 1, "", "__model__"], [6, 4, 1, "", "__random__"], [6, 4, 1, "", "__random_seed__"], [6, 4, 1, "", "__randomize_collection_length__"], [6, 4, 1, "", "__set_as_default_factory_for_type__"], [6, 4, 1, "", "__sync_persistence__"], [6, 2, 1, "", "batch"], [6, 2, 1, "", "build"], [6, 2, 1, "", "create_async"], [6, 2, 1, "", "create_batch_async"], [6, 2, 1, "", "create_batch_sync"], [6, 2, 1, "", "create_factory"], [6, 2, 1, "", "create_sync"], [6, 2, 1, "", "extract_field_build_parameters"], [6, 2, 1, "", "get_field_value"], [6, 2, 1, "", "get_model_fields"], [6, 2, 1, "", "get_provider_map"], [6, 2, 1, "", "is_batch_factory_type"], [6, 2, 1, "", "is_factory_type"], [6, 2, 1, "", "is_ignored_type"], [6, 2, 1, "", "is_supported_type"], [6, 2, 1, "", "process_kwargs"], [6, 2, 1, "", "seed_random"], [6, 2, 1, "", "should_set_field_value"], [6, 2, 1, "", "should_set_none_value"]], "polyfactory.factories.beanie_odm_factory": [[7, 1, 1, "", "BeanieDocumentFactory"], [7, 1, 1, "", "BeaniePersistenceHandler"]], "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory": [[7, 4, 1, "", "__async_persistence__"], [7, 4, 1, "", "__is_base_factory__"], [7, 2, 1, "", "get_field_value"], [7, 2, 1, "", "is_supported_type"]], "polyfactory.factories.beanie_odm_factory.BeaniePersistenceHandler": [[7, 2, 1, "", "save"], [7, 2, 1, "", "save_many"]], "polyfactory.factories.dataclass_factory": [[8, 1, 1, "", "DataclassFactory"]], "polyfactory.factories.dataclass_factory.DataclassFactory": [[8, 4, 1, "", "__is_base_factory__"], [8, 2, 1, "", "get_model_fields"], [8, 2, 1, "", "is_supported_type"]], "polyfactory.factories.msgspec_factory": [[10, 1, 1, "", "MsgspecFactory"]], "polyfactory.factories.msgspec_factory.MsgspecFactory": [[10, 4, 1, "", "__is_base_factory__"], [10, 2, 1, "", "get_model_fields"], [10, 2, 1, "", "get_provider_map"], [10, 2, 1, "", "is_supported_type"]], "polyfactory.factories.odmantic_odm_factory": [[11, 1, 1, "", "OdmanticModelFactory"]], "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory": [[11, 4, 1, "", "__is_base_factory__"], [11, 2, 1, "", "get_provider_map"], [11, 2, 1, "", "is_supported_type"]], "polyfactory.factories.pydantic_factory": [[12, 1, 1, "", "ModelFactory"], [12, 1, 1, "", "PydanticConstraints"], [12, 1, 1, "", "PydanticFieldMeta"]], "polyfactory.factories.pydantic_factory.ModelFactory": [[12, 4, 1, "", "__is_base_factory__"], [12, 2, 1, "", "build"], [12, 2, 1, "", "get_model_fields"], [12, 2, 1, "", "is_custom_root_field"], [12, 2, 1, "", "is_supported_type"], [12, 2, 1, "", "should_set_field_value"]], "polyfactory.factories.pydantic_factory.PydanticFieldMeta": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "from_field_info"], [12, 2, 1, "", "from_model_field"]], "polyfactory.factories.typed_dict_factory": [[13, 1, 1, "", "TypedDictFactory"]], "polyfactory.factories.typed_dict_factory.TypedDictFactory": [[13, 4, 1, "", "__is_base_factory__"], [13, 2, 1, "", "get_model_fields"], [13, 2, 1, "", "is_supported_type"]], "polyfactory.field_meta": [[14, 1, 1, "", "Constraints"], [14, 1, 1, "", "FieldMeta"], [14, 1, 1, "", "Null"], [14, 1, 1, "", "UrlConstraints"]], "polyfactory.field_meta.FieldMeta": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "from_type"], [14, 5, 1, "", "type_args"]], "polyfactory.fields": [[15, 1, 1, "", "Fixture"], [15, 1, 1, "", "Ignore"], [15, 1, 1, "", "PostGenerated"], [15, 1, 1, "", "Require"], [15, 1, 1, "", "Use"], [15, 1, 1, "", "WrappedCallable"]], "polyfactory.fields.Fixture": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "to_value"]], "polyfactory.fields.PostGenerated": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "to_value"]], "polyfactory.fields.Use": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "to_value"]], "polyfactory.persistence": [[17, 1, 1, "", "AsyncPersistenceProtocol"], [17, 1, 1, "", "SyncPersistenceProtocol"]], "polyfactory.persistence.AsyncPersistenceProtocol": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "save"], [17, 2, 1, "", "save_many"]], "polyfactory.persistence.SyncPersistenceProtocol": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "save"], [17, 2, 1, "", "save_many"]], "polyfactory.pytest_plugin": [[18, 1, 1, "", "FactoryFixture"], [18, 6, 1, "", "register_fixture"]], "polyfactory.pytest_plugin.FactoryFixture": [[18, 2, 1, "", "__call__"], [18, 2, 1, "", "__init__"]], "polyfactory.value_generators": [[19, 0, 0, "-", "complex_types"], [20, 0, 0, "-", "constrained_collections"], [21, 0, 0, "-", "constrained_dates"], [22, 0, 0, "-", "constrained_numbers"], [23, 0, 0, "-", "constrained_strings"], [25, 0, 0, "-", "primitives"]], "polyfactory.value_generators.complex_types": [[19, 6, 1, "", "handle_collection_type"]], "polyfactory.value_generators.constrained_collections": [[20, 6, 1, "", "handle_constrained_collection"], [20, 6, 1, "", "handle_constrained_mapping"]], "polyfactory.value_generators.constrained_dates": [[21, 6, 1, "", "handle_constrained_date"]], "polyfactory.value_generators.constrained_numbers": [[22, 1, 1, "", "NumberGeneratorProtocol"], [22, 6, 1, "", "almost_equal_floats"], [22, 6, 1, "", "generate_constrained_number"], [22, 6, 1, "", "get_constrained_number_range"], [22, 6, 1, "", "get_increment"], [22, 6, 1, "", "get_value_or_none"], [22, 6, 1, "", "handle_constrained_decimal"], [22, 6, 1, "", "handle_constrained_float"], [22, 6, 1, "", "handle_constrained_int"], [22, 6, 1, "", "handle_decimal_length"], [22, 6, 1, "", "is_multiply_of_multiple_of_in_range"], [22, 6, 1, "", "passes_pydantic_multiple_validator"], [22, 6, 1, "", "validate_max_digits"]], "polyfactory.value_generators.constrained_numbers.NumberGeneratorProtocol": [[22, 2, 1, "", "__call__"], [22, 2, 1, "", "__init__"]], "polyfactory.value_generators.constrained_strings": [[23, 6, 1, "", "handle_constrained_string_or_bytes"]], "polyfactory.value_generators.primitives": [[25, 6, 1, "", "create_random_boolean"], [25, 6, 1, "", "create_random_bytes"], [25, 6, 1, "", "create_random_decimal"], [25, 6, 1, "", "create_random_float"], [25, 6, 1, "", "create_random_integer"], [25, 6, 1, "", "create_random_string"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:exception", "4": "py:attribute", "5": "py:property", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "function", "Python function"]}, "titleterms": {"contribut": 0, "set": [0, 26], "up": 0, "environ": 0, "code": 0, "workflow": 0, "project": 0, "document": 0, "doc": 0, "theme": 0, "appear": 0, "run": 0, "local": 0, "write": 0, "edit": 0, "creat": [0, 31], "new": 0, "releas": 0, "polyfactori": [1, 33], "instal": 1, "relat": 1, "pydant": 1, "factori": [1, 9, 26, 27, 29, 31, 33], "exampl": 1, "constant": 2, "decor": [3, 28], "except": 4, "attrs_factori": 5, "base_factori": 6, "beanie_odm_factori": 7, "dataclass_factori": 8, "msgspec_factori": 10, "odmantic_odm_factori": 11, "pydantic_factori": 12, "typed_dict_factori": 13, "field_meta": 14, "field": [15, 29, 30], "api": 16, "refer": 16, "persist": [17, 26], "pytest_plugin": 18, "complex_typ": 19, "constrained_collect": 20, "constrained_d": 21, "constrained_numb": 22, "constrained_str": 23, "value_gener": 24, "primit": 25, "configur": 26, "seed": 26, "random": 26, "faker": 26, "handler": 26, "defin": 26, "default": 26, "collect": 26, "length": 26, "allow": 26, "none": 26, "option": 26, "declar": 27, "imper": 27, "creation": 27, "The": [28, 29, 30], "post_gener": 28, "us": 29, "ignor": 29, "requir": 29, "postgener": 29, "pytest": 30, "fixtur": 30, "handl": 31, "custom": 31, "type": 31, "base": 31, "usag": 32, "guid": 32}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"field_meta": [[14, "module-polyfactory.field_meta"]], "constrained_dates": [[21, "module-polyfactory.value_generators.constrained_dates"]], "typed_dict_factory": [[13, "module-polyfactory.factories.typed_dict_factory"]], "API Reference": [[16, "api-reference"]], "persistence": [[17, "module-polyfactory.persistence"]], "constrained_numbers": [[22, "module-polyfactory.value_generators.constrained_numbers"]], "pytest_plugin": [[18, "module-polyfactory.pytest_plugin"]], "complex_types": [[19, "module-polyfactory.value_generators.complex_types"]], "primitives": [[25, "module-polyfactory.value_generators.primitives"]], "fields": [[15, "module-polyfactory.fields"]], "value_generators": [[24, "value-generators"]], "constrained_collections": [[20, "module-polyfactory.value_generators.constrained_collections"]], "constrained_strings": [[23, "module-polyfactory.value_generators.constrained_strings"]], "Declaring Factories": [[27, "declaring-factories"]], "Imperative Factory Creation": [[27, "imperative-factory-creation"]], "Usage Guide": [[32, "usage-guide"]], "Factory Configuration": [[26, "factory-configuration"]], "Seeding Randomness": [[26, "seeding-randomness"]], "Setting Random": [[26, "setting-random"]], "Setting Faker": [[26, "setting-faker"]], "Persistence Handlers": [[26, "persistence-handlers"]], "Defining Default Factories": [[26, "defining-default-factories"]], "Randomized Collection Length": [[26, "randomized-collection-length"]], "Allow None Optionals": [[26, "allow-none-optionals"]], "Factory Fields": [[29, "factory-fields"]], "The Use Field": [[29, "the-use-field"]], "The Ignore Field": [[29, "the-ignore-field"]], "The Require Field": [[29, "the-require-field"]], "The PostGenerated Field": [[29, "the-postgenerated-field"]], "Handling Custom Types": [[31, "handling-custom-types"]], "Creating Custom Base Factories": [[31, "creating-custom-base-factories"]], "Polyfactory Factories": [[33, "polyfactory-factories"]], "Pytest fixtures": [[30, "pytest-fixtures"]], "The Fixture Field": [[30, "the-fixture-field"]], "The post_generated decorator": [[28, "the-post-generated-decorator"]], "pydantic_factory": [[12, "module-polyfactory.factories.pydantic_factory"]], "odmantic_odm_factory": [[11, "module-polyfactory.factories.odmantic_odm_factory"]], "decorators": [[3, "module-polyfactory.decorators"]], "factories": [[9, "factories"]], "base_factory": [[6, "module-polyfactory.factories.base"]], "Polyfactory": [[1, "polyfactory"]], "Installation": [[1, "installation"]], "Relation to Pydantic-Factories": [[1, "relation-to-pydantic-factories"]], "Example": [[1, "example"]], "dataclass_factory": [[8, "module-polyfactory.factories.dataclass_factory"]], "exceptions": [[4, "module-polyfactory.exceptions"]], "attrs_factory": [[5, "module-polyfactory.factories.attrs_factory"]], "constants": [[2, "constants"]], "Contributing": [[0, "contributing"]], "Setting up the environment": [[0, "setting-up-the-environment"]], "Code contributions": [[0, "code-contributions"]], "Workflow": [[0, "workflow"]], "Project documentation": [[0, "project-documentation"]], "Docs theme and appearance": [[0, "docs-theme-and-appearance"]], "Running the docs locally": [[0, "running-the-docs-locally"]], "Writing and editing docs": [[0, "writing-and-editing-docs"]], "Creating a new release": [[0, "creating-a-new-release"]], "msgspec_factory": [[10, "module-polyfactory.factories.msgspec_factory"]], "beanie_odm_factory": [[7, "module-polyfactory.factories.beanie_odm_factory"]]}, "indexentries": {"module": [[2, "module-polyfactory.constants"], [3, "module-polyfactory.decorators"], [4, "module-polyfactory.exceptions"], [5, "module-polyfactory.factories.attrs_factory"], [6, "module-polyfactory.factories.base"], [7, "module-polyfactory.factories.beanie_odm_factory"], [8, "module-polyfactory.factories.dataclass_factory"], [10, "module-polyfactory.factories.msgspec_factory"], [11, "module-polyfactory.factories.odmantic_odm_factory"], [12, "module-polyfactory.factories.pydantic_factory"], [13, "module-polyfactory.factories.typed_dict_factory"], [14, "module-polyfactory.field_meta"], [15, "module-polyfactory.fields"], [17, "module-polyfactory.persistence"], [18, "module-polyfactory.pytest_plugin"], [19, "module-polyfactory.value_generators.complex_types"], [20, "module-polyfactory.value_generators.constrained_collections"], [21, "module-polyfactory.value_generators.constrained_dates"], [22, "module-polyfactory.value_generators.constrained_numbers"], [23, "module-polyfactory.value_generators.constrained_strings"], [25, "module-polyfactory.value_generators.primitives"]], "polyfactory.constants": [[2, "module-polyfactory.constants"]], "__init__() (polyfactory.decorators.post_generated method)": [[3, "polyfactory.decorators.post_generated.__init__"]], "polyfactory.decorators": [[3, "module-polyfactory.decorators"]], "post_generated (class in polyfactory.decorators)": [[3, "polyfactory.decorators.post_generated"]], "configurationexception": [[4, "polyfactory.exceptions.ConfigurationException"]], "factoryexception": [[4, "polyfactory.exceptions.FactoryException"]], "missingbuildkwargexception": [[4, "polyfactory.exceptions.MissingBuildKwargException"]], "missingdependencyexception": [[4, "polyfactory.exceptions.MissingDependencyException"]], "parameterexception": [[4, "polyfactory.exceptions.ParameterException"]], "polyfactory.exceptions": [[4, "module-polyfactory.exceptions"]], "attrsfactory (class in polyfactory.factories.attrs_factory)": [[5, "polyfactory.factories.attrs_factory.AttrsFactory"]], "__is_base_factory__ (polyfactory.factories.attrs_factory.attrsfactory attribute)": [[5, "polyfactory.factories.attrs_factory.AttrsFactory.__is_base_factory__"]], "get_model_fields() (polyfactory.factories.attrs_factory.attrsfactory class method)": [[5, "polyfactory.factories.attrs_factory.AttrsFactory.get_model_fields"]], "is_supported_type() (polyfactory.factories.attrs_factory.attrsfactory class method)": [[5, "polyfactory.factories.attrs_factory.AttrsFactory.is_supported_type"]], "polyfactory.factories.attrs_factory": [[5, "module-polyfactory.factories.attrs_factory"]], "basefactory (class in polyfactory.factories.base)": [[6, "polyfactory.factories.base.BaseFactory"]], "__allow_none_optionals__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__allow_none_optionals__"]], "__async_persistence__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__async_persistence__"]], "__base_factory_overrides__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__base_factory_overrides__"]], "__faker__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__faker__"]], "__is_base_factory__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__is_base_factory__"]], "__max_collection_length__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__max_collection_length__"]], "__min_collection_length__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__min_collection_length__"]], "__model__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__model__"]], "__random__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__random__"]], "__random_seed__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__random_seed__"]], "__randomize_collection_length__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__randomize_collection_length__"]], "__set_as_default_factory_for_type__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__set_as_default_factory_for_type__"]], "__sync_persistence__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__sync_persistence__"]], "batch() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.batch"]], "build() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.build"]], "create_async() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.create_async"]], "create_batch_async() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.create_batch_async"]], "create_batch_sync() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.create_batch_sync"]], "create_factory() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.create_factory"]], "create_sync() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.create_sync"]], "extract_field_build_parameters() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.extract_field_build_parameters"]], "get_field_value() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.get_field_value"]], "get_model_fields() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.get_model_fields"]], "get_provider_map() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.get_provider_map"]], "is_batch_factory_type() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.is_batch_factory_type"]], "is_factory_type() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.is_factory_type"]], "is_ignored_type() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.is_ignored_type"]], "is_supported_type() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.is_supported_type"]], "polyfactory.factories.base": [[6, "module-polyfactory.factories.base"]], "process_kwargs() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.process_kwargs"]], "seed_random() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.seed_random"]], "should_set_field_value() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.should_set_field_value"]], "should_set_none_value() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.should_set_none_value"]], "beaniedocumentfactory (class in polyfactory.factories.beanie_odm_factory)": [[7, "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory"]], "beaniepersistencehandler (class in polyfactory.factories.beanie_odm_factory)": [[7, "polyfactory.factories.beanie_odm_factory.BeaniePersistenceHandler"]], "__async_persistence__ (polyfactory.factories.beanie_odm_factory.beaniedocumentfactory attribute)": [[7, "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory.__async_persistence__"]], "__is_base_factory__ (polyfactory.factories.beanie_odm_factory.beaniedocumentfactory attribute)": [[7, "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory.__is_base_factory__"]], "get_field_value() (polyfactory.factories.beanie_odm_factory.beaniedocumentfactory class method)": [[7, "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory.get_field_value"]], "is_supported_type() (polyfactory.factories.beanie_odm_factory.beaniedocumentfactory class method)": [[7, "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory.is_supported_type"]], "polyfactory.factories.beanie_odm_factory": [[7, "module-polyfactory.factories.beanie_odm_factory"]], "save() (polyfactory.factories.beanie_odm_factory.beaniepersistencehandler method)": [[7, "polyfactory.factories.beanie_odm_factory.BeaniePersistenceHandler.save"]], "save_many() (polyfactory.factories.beanie_odm_factory.beaniepersistencehandler method)": [[7, "polyfactory.factories.beanie_odm_factory.BeaniePersistenceHandler.save_many"]], "dataclassfactory (class in polyfactory.factories.dataclass_factory)": [[8, "polyfactory.factories.dataclass_factory.DataclassFactory"]], "__is_base_factory__ (polyfactory.factories.dataclass_factory.dataclassfactory attribute)": [[8, "polyfactory.factories.dataclass_factory.DataclassFactory.__is_base_factory__"]], "get_model_fields() (polyfactory.factories.dataclass_factory.dataclassfactory class method)": [[8, "polyfactory.factories.dataclass_factory.DataclassFactory.get_model_fields"]], "is_supported_type() (polyfactory.factories.dataclass_factory.dataclassfactory class method)": [[8, "polyfactory.factories.dataclass_factory.DataclassFactory.is_supported_type"]], "polyfactory.factories.dataclass_factory": [[8, "module-polyfactory.factories.dataclass_factory"]], "msgspecfactory (class in polyfactory.factories.msgspec_factory)": [[10, "polyfactory.factories.msgspec_factory.MsgspecFactory"]], "__is_base_factory__ (polyfactory.factories.msgspec_factory.msgspecfactory attribute)": [[10, "polyfactory.factories.msgspec_factory.MsgspecFactory.__is_base_factory__"]], "get_model_fields() (polyfactory.factories.msgspec_factory.msgspecfactory class method)": [[10, "polyfactory.factories.msgspec_factory.MsgspecFactory.get_model_fields"]], "get_provider_map() (polyfactory.factories.msgspec_factory.msgspecfactory class method)": [[10, "polyfactory.factories.msgspec_factory.MsgspecFactory.get_provider_map"]], "is_supported_type() (polyfactory.factories.msgspec_factory.msgspecfactory class method)": [[10, "polyfactory.factories.msgspec_factory.MsgspecFactory.is_supported_type"]], "polyfactory.factories.msgspec_factory": [[10, "module-polyfactory.factories.msgspec_factory"]], "odmanticmodelfactory (class in polyfactory.factories.odmantic_odm_factory)": [[11, "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory"]], "__is_base_factory__ (polyfactory.factories.odmantic_odm_factory.odmanticmodelfactory attribute)": [[11, "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory.__is_base_factory__"]], "get_provider_map() (polyfactory.factories.odmantic_odm_factory.odmanticmodelfactory class method)": [[11, "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory.get_provider_map"]], "is_supported_type() (polyfactory.factories.odmantic_odm_factory.odmanticmodelfactory class method)": [[11, "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory.is_supported_type"]], "polyfactory.factories.odmantic_odm_factory": [[11, "module-polyfactory.factories.odmantic_odm_factory"]], "modelfactory (class in polyfactory.factories.pydantic_factory)": [[12, "polyfactory.factories.pydantic_factory.ModelFactory"]], "pydanticconstraints (class in polyfactory.factories.pydantic_factory)": [[12, "polyfactory.factories.pydantic_factory.PydanticConstraints"]], "pydanticfieldmeta (class in polyfactory.factories.pydantic_factory)": [[12, "polyfactory.factories.pydantic_factory.PydanticFieldMeta"]], "__init__() (polyfactory.factories.pydantic_factory.pydanticfieldmeta method)": [[12, "polyfactory.factories.pydantic_factory.PydanticFieldMeta.__init__"]], "__is_base_factory__ (polyfactory.factories.pydantic_factory.modelfactory attribute)": [[12, "polyfactory.factories.pydantic_factory.ModelFactory.__is_base_factory__"]], "build() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[12, "polyfactory.factories.pydantic_factory.ModelFactory.build"]], "from_field_info() (polyfactory.factories.pydantic_factory.pydanticfieldmeta class method)": [[12, "polyfactory.factories.pydantic_factory.PydanticFieldMeta.from_field_info"]], "from_model_field() (polyfactory.factories.pydantic_factory.pydanticfieldmeta class method)": [[12, "polyfactory.factories.pydantic_factory.PydanticFieldMeta.from_model_field"]], "get_model_fields() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[12, "polyfactory.factories.pydantic_factory.ModelFactory.get_model_fields"]], "is_custom_root_field() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[12, "polyfactory.factories.pydantic_factory.ModelFactory.is_custom_root_field"]], "is_supported_type() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[12, "polyfactory.factories.pydantic_factory.ModelFactory.is_supported_type"]], "polyfactory.factories.pydantic_factory": [[12, "module-polyfactory.factories.pydantic_factory"]], "should_set_field_value() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[12, "polyfactory.factories.pydantic_factory.ModelFactory.should_set_field_value"]], "typeddictfactory (class in polyfactory.factories.typed_dict_factory)": [[13, "polyfactory.factories.typed_dict_factory.TypedDictFactory"]], "__is_base_factory__ (polyfactory.factories.typed_dict_factory.typeddictfactory attribute)": [[13, "polyfactory.factories.typed_dict_factory.TypedDictFactory.__is_base_factory__"]], "get_model_fields() (polyfactory.factories.typed_dict_factory.typeddictfactory class method)": [[13, "polyfactory.factories.typed_dict_factory.TypedDictFactory.get_model_fields"]], "is_supported_type() (polyfactory.factories.typed_dict_factory.typeddictfactory class method)": [[13, "polyfactory.factories.typed_dict_factory.TypedDictFactory.is_supported_type"]], "polyfactory.factories.typed_dict_factory": [[13, "module-polyfactory.factories.typed_dict_factory"]], "constraints (class in polyfactory.field_meta)": [[14, "polyfactory.field_meta.Constraints"]], "fieldmeta (class in polyfactory.field_meta)": [[14, "polyfactory.field_meta.FieldMeta"]], "null (class in polyfactory.field_meta)": [[14, "polyfactory.field_meta.Null"]], "urlconstraints (class in polyfactory.field_meta)": [[14, "polyfactory.field_meta.UrlConstraints"]], "__init__() (polyfactory.field_meta.fieldmeta method)": [[14, "polyfactory.field_meta.FieldMeta.__init__"]], "from_type() (polyfactory.field_meta.fieldmeta class method)": [[14, "polyfactory.field_meta.FieldMeta.from_type"]], "polyfactory.field_meta": [[14, "module-polyfactory.field_meta"]], "type_args (polyfactory.field_meta.fieldmeta property)": [[14, "polyfactory.field_meta.FieldMeta.type_args"]], "fixture (class in polyfactory.fields)": [[15, "polyfactory.fields.Fixture"]], "ignore (class in polyfactory.fields)": [[15, "polyfactory.fields.Ignore"]], "postgenerated (class in polyfactory.fields)": [[15, "polyfactory.fields.PostGenerated"]], "require (class in polyfactory.fields)": [[15, "polyfactory.fields.Require"]], "use (class in polyfactory.fields)": [[15, "polyfactory.fields.Use"]], "wrappedcallable (class in polyfactory.fields)": [[15, "polyfactory.fields.WrappedCallable"]], "__init__() (polyfactory.fields.fixture method)": [[15, "polyfactory.fields.Fixture.__init__"]], "__init__() (polyfactory.fields.postgenerated method)": [[15, "polyfactory.fields.PostGenerated.__init__"]], "__init__() (polyfactory.fields.use method)": [[15, "polyfactory.fields.Use.__init__"]], "polyfactory.fields": [[15, "module-polyfactory.fields"]], "to_value() (polyfactory.fields.fixture method)": [[15, "polyfactory.fields.Fixture.to_value"]], "to_value() (polyfactory.fields.postgenerated method)": [[15, "polyfactory.fields.PostGenerated.to_value"]], "to_value() (polyfactory.fields.use method)": [[15, "polyfactory.fields.Use.to_value"]], "asyncpersistenceprotocol (class in polyfactory.persistence)": [[17, "polyfactory.persistence.AsyncPersistenceProtocol"]], "syncpersistenceprotocol (class in polyfactory.persistence)": [[17, "polyfactory.persistence.SyncPersistenceProtocol"]], "__init__() (polyfactory.persistence.asyncpersistenceprotocol method)": [[17, "polyfactory.persistence.AsyncPersistenceProtocol.__init__"]], "__init__() (polyfactory.persistence.syncpersistenceprotocol method)": [[17, "polyfactory.persistence.SyncPersistenceProtocol.__init__"]], "polyfactory.persistence": [[17, "module-polyfactory.persistence"]], "save() (polyfactory.persistence.asyncpersistenceprotocol method)": [[17, "polyfactory.persistence.AsyncPersistenceProtocol.save"]], "save() (polyfactory.persistence.syncpersistenceprotocol method)": [[17, "polyfactory.persistence.SyncPersistenceProtocol.save"]], "save_many() (polyfactory.persistence.asyncpersistenceprotocol method)": [[17, "polyfactory.persistence.AsyncPersistenceProtocol.save_many"]], "save_many() (polyfactory.persistence.syncpersistenceprotocol method)": [[17, "polyfactory.persistence.SyncPersistenceProtocol.save_many"]], "factoryfixture (class in polyfactory.pytest_plugin)": [[18, "polyfactory.pytest_plugin.FactoryFixture"]], "__call__() (polyfactory.pytest_plugin.factoryfixture method)": [[18, "polyfactory.pytest_plugin.FactoryFixture.__call__"]], "__init__() (polyfactory.pytest_plugin.factoryfixture method)": [[18, "polyfactory.pytest_plugin.FactoryFixture.__init__"]], "polyfactory.pytest_plugin": [[18, "module-polyfactory.pytest_plugin"]], "register_fixture() (in module polyfactory.pytest_plugin)": [[18, "polyfactory.pytest_plugin.register_fixture"]], "handle_collection_type() (in module polyfactory.value_generators.complex_types)": [[19, "polyfactory.value_generators.complex_types.handle_collection_type"]], "polyfactory.value_generators.complex_types": [[19, "module-polyfactory.value_generators.complex_types"]], "handle_constrained_collection() (in module polyfactory.value_generators.constrained_collections)": [[20, "polyfactory.value_generators.constrained_collections.handle_constrained_collection"]], "handle_constrained_mapping() (in module polyfactory.value_generators.constrained_collections)": [[20, "polyfactory.value_generators.constrained_collections.handle_constrained_mapping"]], "polyfactory.value_generators.constrained_collections": [[20, "module-polyfactory.value_generators.constrained_collections"]], "handle_constrained_date() (in module polyfactory.value_generators.constrained_dates)": [[21, "polyfactory.value_generators.constrained_dates.handle_constrained_date"]], "polyfactory.value_generators.constrained_dates": [[21, "module-polyfactory.value_generators.constrained_dates"]], "numbergeneratorprotocol (class in polyfactory.value_generators.constrained_numbers)": [[22, "polyfactory.value_generators.constrained_numbers.NumberGeneratorProtocol"]], "__call__() (polyfactory.value_generators.constrained_numbers.numbergeneratorprotocol method)": [[22, "polyfactory.value_generators.constrained_numbers.NumberGeneratorProtocol.__call__"]], "__init__() (polyfactory.value_generators.constrained_numbers.numbergeneratorprotocol method)": [[22, "polyfactory.value_generators.constrained_numbers.NumberGeneratorProtocol.__init__"]], "almost_equal_floats() (in module polyfactory.value_generators.constrained_numbers)": [[22, "polyfactory.value_generators.constrained_numbers.almost_equal_floats"]], "generate_constrained_number() (in module polyfactory.value_generators.constrained_numbers)": [[22, "polyfactory.value_generators.constrained_numbers.generate_constrained_number"]], "get_constrained_number_range() (in module polyfactory.value_generators.constrained_numbers)": [[22, "polyfactory.value_generators.constrained_numbers.get_constrained_number_range"]], "get_increment() (in module polyfactory.value_generators.constrained_numbers)": [[22, "polyfactory.value_generators.constrained_numbers.get_increment"]], "get_value_or_none() (in module polyfactory.value_generators.constrained_numbers)": [[22, "polyfactory.value_generators.constrained_numbers.get_value_or_none"]], "handle_constrained_decimal() (in module polyfactory.value_generators.constrained_numbers)": [[22, "polyfactory.value_generators.constrained_numbers.handle_constrained_decimal"]], "handle_constrained_float() (in module polyfactory.value_generators.constrained_numbers)": [[22, "polyfactory.value_generators.constrained_numbers.handle_constrained_float"]], "handle_constrained_int() (in module polyfactory.value_generators.constrained_numbers)": [[22, "polyfactory.value_generators.constrained_numbers.handle_constrained_int"]], "handle_decimal_length() (in module polyfactory.value_generators.constrained_numbers)": [[22, "polyfactory.value_generators.constrained_numbers.handle_decimal_length"]], "is_multiply_of_multiple_of_in_range() (in module polyfactory.value_generators.constrained_numbers)": [[22, "polyfactory.value_generators.constrained_numbers.is_multiply_of_multiple_of_in_range"]], "passes_pydantic_multiple_validator() (in module polyfactory.value_generators.constrained_numbers)": [[22, "polyfactory.value_generators.constrained_numbers.passes_pydantic_multiple_validator"]], "polyfactory.value_generators.constrained_numbers": [[22, "module-polyfactory.value_generators.constrained_numbers"]], "validate_max_digits() (in module polyfactory.value_generators.constrained_numbers)": [[22, "polyfactory.value_generators.constrained_numbers.validate_max_digits"]], "handle_constrained_string_or_bytes() (in module polyfactory.value_generators.constrained_strings)": [[23, "polyfactory.value_generators.constrained_strings.handle_constrained_string_or_bytes"]], "polyfactory.value_generators.constrained_strings": [[23, "module-polyfactory.value_generators.constrained_strings"]], "create_random_boolean() (in module polyfactory.value_generators.primitives)": [[25, "polyfactory.value_generators.primitives.create_random_boolean"]], "create_random_bytes() (in module polyfactory.value_generators.primitives)": [[25, "polyfactory.value_generators.primitives.create_random_bytes"]], "create_random_decimal() (in module polyfactory.value_generators.primitives)": [[25, "polyfactory.value_generators.primitives.create_random_decimal"]], "create_random_float() (in module polyfactory.value_generators.primitives)": [[25, "polyfactory.value_generators.primitives.create_random_float"]], "create_random_integer() (in module polyfactory.value_generators.primitives)": [[25, "polyfactory.value_generators.primitives.create_random_integer"]], "create_random_string() (in module polyfactory.value_generators.primitives)": [[25, "polyfactory.value_generators.primitives.create_random_string"]], "polyfactory.value_generators.primitives": [[25, "module-polyfactory.value_generators.primitives"]]}})