Search.setIndex({"docnames": ["contributing", "index", "reference/constants", "reference/decorators", "reference/exceptions", "reference/factories/base", "reference/factories/beanie_odm_factory", "reference/factories/dataclass_factory", "reference/factories/index", "reference/factories/msgspec_factory", "reference/factories/odmantic_odm_factory", "reference/factories/pydantic_factory", "reference/factories/typed_dict_factory", "reference/field_meta", "reference/fields", "reference/index", "reference/persistence", "reference/pytest_plugin", "reference/value_generators/complex_types", "reference/value_generators/constrained_collections", "reference/value_generators/constrained_dates", "reference/value_generators/constrained_numbers", "reference/value_generators/constrained_strings", "reference/value_generators/index", "reference/value_generators/primitives", "usage/configuration", "usage/declaring_factories", "usage/decorators", "usage/fields", "usage/fixtures", "usage/handling_custom_types", "usage/index", "usage/library_factories"], "filenames": ["contributing.rst", "index.rst", "reference/constants.rst", "reference/decorators.rst", "reference/exceptions.rst", "reference/factories/base.rst", "reference/factories/beanie_odm_factory.rst", "reference/factories/dataclass_factory.rst", "reference/factories/index.rst", "reference/factories/msgspec_factory.rst", "reference/factories/odmantic_odm_factory.rst", "reference/factories/pydantic_factory.rst", "reference/factories/typed_dict_factory.rst", "reference/field_meta.rst", "reference/fields.rst", "reference/index.rst", "reference/persistence.rst", "reference/pytest_plugin.rst", "reference/value_generators/complex_types.rst", "reference/value_generators/constrained_collections.rst", "reference/value_generators/constrained_dates.rst", "reference/value_generators/constrained_numbers.rst", "reference/value_generators/constrained_strings.rst", "reference/value_generators/index.rst", "reference/value_generators/primitives.rst", "usage/configuration.rst", "usage/declaring_factories.rst", "usage/decorators.rst", "usage/fields.rst", "usage/fixtures.rst", "usage/handling_custom_types.rst", "usage/index.rst", "usage/library_factories.rst"], "titles": ["Contributing", "Polyfactory", "constants", "decorators", "exceptions", "base_factory", "beanie_odm_factory", "dataclass_factory", "factories", "msgspec_factory", "odmantic_odm_factory", "pydantic_factory", "typed_dict_factory", "field_meta", "fields", "API Reference", "persistence", "pytest_plugin", "complex_types", "constrained_collections", "constrained_dates", "constrained_numbers", "constrained_strings", "value_generators", "primitives", "Factory Configuration", "Declaring Factories", "The <code class=\"docutils literal notranslate\"><span class=\"pre\">post_generated</span></code> decorator", "Factory Fields", "Pytest fixtures", "Handling Custom Types", "Usage Guide", "Polyfactory Factories"], "terms": {"instal": [0, 4], "poetri": 0, "virtual": 0, "depend": [0, 4, 21, 27, 32], "If": [0, 5, 11, 25], "you": [0, 25, 26, 28, 29, 30], "re": [0, 28], "work": [0, 1, 30], "need": [0, 25, 28, 30], "build": [0, 1, 4, 5, 6, 11, 14, 25, 26, 27, 28, 29, 30], "extra": 0, "pre": 0, "commit": 0, "hook": 0, "fork": 0, "upstream": 0, "repositori": 0, "clone": 0, "": [0, 1, 5, 7, 9, 11, 12, 13, 14, 21, 25, 28, 30], "make": [0, 28, 32], "whatev": 0, "chang": [0, 1], "addit": [0, 32], "wish": 0, "pleas": 0, "try": 0, "keep": 0, "your": [0, 30], "histori": 0, "clean": 0, "1": [0, 25, 28], "note": [0, 5, 6, 9, 10], "100": 0, "test": [0, 11, 25], "ar": [0, 1, 4, 5, 11, 14, 21, 25, 26, 28, 29, 32], "mandatori": 0, "onc": [0, 25], "readi": 0, "add": [0, 21, 25, 30], "pr": 0, "main": [0, 1, 5], "repo": 0, "pull": 0, "request": 0, "an": [0, 5, 6, 7, 9, 10, 11, 12, 13, 14, 17, 20, 21, 22, 24, 25, 28, 30, 32], "explan": 0, "The": [0, 1, 9, 11, 14, 16, 21, 26, 30, 31, 32], "suit": 0, "requir": [0, 1, 4, 14, 25, 32], "have": [0, 25], "instanc": [0, 5, 6, 7, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 28, 30], "mongodb": [0, 6], "avail": [0, 1], "can": [0, 1, 18, 19, 21, 25, 26, 28, 29, 30], "launch": 0, "one": [0, 21, 28], "us": [0, 1, 2, 4, 5, 6, 11, 13, 14, 17, 21, 25, 26, 27, 29, 30], "root": [0, 11], "level": 0, "docker": 0, "compos": 0, "config": 0, "detach": 0, "ani": [0, 5, 6, 7, 9, 10, 11, 12, 13, 14, 17, 18, 19, 25, 26, 28, 30, 32], "other": [0, 5, 14, 25, 26, 28, 32], "mean": [0, 28], "i": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 21, 25, 26, 27, 28, 29, 30], "locat": 0, "directori": 0, "built": [0, 18], "rest": 0, "sphinx": 0, "unfamiliar": 0, "those": 0, "restructuredtext": 0, "primer": 0, "quickstart": 0, "recommend": 0, "read": [0, 25], "we": [0, 1, 6, 25, 28, 29, 30, 32], "welcom": 0, "enhanc": 0, "improv": 0, "usabl": 0, "custom": [0, 1, 11, 21, 28, 31], "inherit": 0, "pydata": 0, "which": [0, 1, 26, 28, 30], "come": 0, "lot": 0, "option": [0, 14, 17, 21, 25, 29, 32], "out": 0, "box": 0, "style": 0, "setup": 0, "static": 0, "site": 0, "gener": [0, 1, 5, 6, 7, 9, 10, 11, 12, 14, 18, 19, 20, 21, 24, 25, 26, 27, 28, 30], "should": [0, 5, 11, 19, 25, 28], "consult": 0, "first": [0, 25], "step": 0, "To": [0, 25, 29, 30], "Then": 0, "serv": 0, "them": 0, "content": 0, "feel": 0, "free": 0, "exampl": [0, 22, 25, 26, 27, 28, 29, 30], "clarifi": 0, "text": 0, "restructur": 0, "etc": [0, 25], "sure": [0, 32], "follow": 0, "guidelin": 0, "idiomat": 0, "english": 0, "simpl": [0, 1, 28], "languag": 0, "self": [0, 13, 25, 30], "contain": [0, 13, 18], "provid": [0, 4, 28, 30], "link": 0, "where": [0, 28], "applic": 0, "intersphinx": 0, "wherev": 0, "possibl": [0, 1, 28], "when": [0, 4, 5, 11, 25, 27, 28, 30], "referenc": 0, "extern": 0, "librari": [0, 1, 5, 25, 26, 28, 30, 32], "diagram": 0, "mermaidj": 0, "updat": 0, "changelog": 0, "md": 0, "increment": [0, 21], "version": [0, 1], "pyproject": 0, "toml": 0, "push": 0, "In": [0, 25, 28, 29, 30], "github": 0, "go": 0, "tab": 0, "pick": 0, "draft": 0, "give": [0, 28], "titl": 0, "tag": 0, "both": [0, 25], "vx": 0, "x": 0, "fill": 0, "descript": 0, "let": [0, 28], "do": [0, 25, 28, 30, 32], "publish": 0, "look": [0, 28], "under": [0, 1, 28], "action": 0, "pane": 0, "correctli": 0, "power": 1, "mock": [1, 5, 6, 25, 28, 30], "data": [1, 6, 13, 16, 25, 28], "base": [1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 16, 17, 18, 21, 26, 28, 32], "around": 1, "type": [1, 2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 17, 18, 19, 21, 22, 25, 26, 27, 28, 29, 31, 32], "hint": 1, "support": [1, 5, 6, 7, 9, 10, 11, 12, 25, 29], "dataclass": [1, 7, 25, 26, 27, 28, 29, 30, 32], "dict": [1, 5, 9, 10, 14, 25, 26, 28, 30, 32], "model": [1, 5, 7, 9, 10, 11, 12, 13, 17, 25, 26, 32], "msgspec": [1, 9, 32], "struct": [1, 9, 32], "more": [1, 25], "pip": 1, "prior": 1, "2": [1, 28], "thi": [1, 2, 5, 9, 10, 11, 13, 14, 25, 26, 27, 28, 29, 30, 32], "wa": [1, 14], "known": 1, "name": [1, 5, 9, 11, 13, 14, 17, 25, 26, 27, 28, 29], "gain": 1, "quit": 1, "bit": 1, "popular": 1, "A": [1, 5, 6, 7, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24], "motiv": 1, "0": [1, 25, 26, 28], "releas": 1, "want": 1, "than": [1, 20, 21, 28], "just": 1, "someth": 1, "also": [1, 25, 26, 29], "its": [1, 25, 27, 28], "core": 1, "architectur": 1, "As": [1, 25, 29, 32], "would": 1, "longer": 1, "directli": [1, 28], "ti": 1, "chosen": 1, "new": [1, 5, 25], "reflect": 1, "capabl": [1, 11], "It": 1, "odmant": [1, 10, 32], "beani": [1, 6, 32], "odm": [1, 25], "well": [1, 25], "minim": [1, 19, 21, 25], "from": [1, 5, 6, 7, 9, 11, 12, 13, 14, 17, 25, 26, 27, 28, 29, 30, 32], "import": [1, 25, 26, 27, 28, 29, 30], "dataclassfactori": [1, 7, 25, 26, 27, 28, 29, 30, 32], "class": [1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 16, 17, 21, 25, 26, 27, 28, 29, 30, 32], "person": [1, 25, 26, 28, 29, 30], "str": [1, 5, 9, 11, 13, 14, 17, 22, 24, 25, 26, 28, 29, 30], "ag": [1, 25, 26, 28, 29], "float": [1, 21, 24, 25, 26, 28, 29], "height": [1, 25, 26], "weight": [1, 25, 26], "personfactori": [1, 25, 26, 28, 29, 30], "__model__": [1, 5, 11, 25, 26, 27, 28, 29, 30], "def": [1, 25, 26, 27, 28, 29, 30], "test_is_person": [1, 26], "none": [1, 3, 5, 6, 13, 14, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30], "person_inst": [1, 25, 26, 28, 29, 30], "assert": [1, 25, 26, 27, 28, 29, 30], "isinst": [1, 25, 26, 29, 30], "That": [1, 26], "almost": [1, 21], "abl": 1, "creat": [1, 6, 11, 13, 14, 17, 26], "object": [1, 3, 13, 14, 17], "fit": 1, "definit": [1, 26], "becaus": [1, 6, 25, 29], "inform": 1, "sourc": 1, "truth": 1, "pars": [1, 9], "store": [1, 13, 14, 18, 25], "dictionari": [1, 5, 9, 10, 13, 25, 28], "kwarg": [1, 4, 5, 6, 11, 14, 16, 21, 25, 28, 29], "pass": [1, 5, 6, 11, 14, 21, 28], "constructor": [1, 21], "map": [2, 5, 9, 10, 28, 30], "annot": [2, 5, 9, 13], "concret": 2, "normal": [2, 13, 29], "python": [2, 21], "3": [2, 27], "9": 2, "polyfactori": [3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31], "post_gener": [3, 31], "descriptor": 3, "wrap": [3, 14, 27, 29], "classmethod": [3, 5, 6, 7, 9, 10, 11, 12, 13, 25, 27, 28, 30], "postgener": [3, 14, 27], "field": [3, 5, 6, 7, 9, 11, 12, 13, 15, 18, 19, 25, 27, 31], "__init__": [3, 13, 14, 16, 17, 21, 30], "method": [3, 5, 6, 9, 10, 13, 14, 21, 25, 26, 28, 29, 30], "union": [3, 25, 26, 28, 29], "callabl": [3, 5, 9, 10, 14, 19, 21, 22, 28, 29, 30], "factoryexcept": 4, "factori": [4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 27, 29, 31], "error": 4, "configurationexcept": 4, "configur": [4, 31], "misconfigur": 4, "parameterexcept": [4, 14], "paramet": [4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 27], "wrong": 4, "missingbuildkwargexcept": [4, 28], "miss": 4, "missingdependencyexcept": 4, "importerror": 4, "is_factori": 5, "valu": [5, 6, 7, 9, 10, 11, 12, 13, 14, 19, 20, 21, 22, 24, 25, 28, 30], "typeguard": [5, 6, 7, 9, 10, 11, 12], "basefactori": [5, 7, 9, 11, 12, 17, 18, 19, 25, 32], "determin": [5, 6, 7, 9, 10, 11, 12, 21], "given": [5, 6, 7, 9, 10, 11, 12, 14, 21, 24, 28], "subclass": [5, 6, 11, 26], "modelfactori": [5, 6, 10, 11, 26, 32], "arbitrari": [5, 6, 7, 9, 10, 11, 12, 14], "return": [5, 6, 7, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 30], "boolean": [5, 11, 21, 24], "abc": [5, 32], "t": [5, 6, 7, 9, 10, 11, 14, 16, 19, 21, 22, 30], "hold": 5, "logic": [5, 6, 25], "is_factory_typ": 5, "bool": [5, 11, 17, 19, 21, 22, 24], "whether": [5, 6, 7, 9, 10, 11, 12, 19, 21, 22, 24], "dictat": [5, 21], "is_batch_factory_typ": 5, "sequenc": 5, "batch": [5, 14, 28, 29], "extract_field_build_paramet": 5, "field_meta": [5, 6, 7, 11, 12, 15, 18, 19, 21], "fieldmeta": [5, 6, 7, 9, 11, 12, 13, 18, 19], "build_arg": 5, "extract": 5, "meta": [5, 11, 13, 18, 19], "abstract": [5, 28, 32], "is_supported_typ": [5, 6, 7, 9, 10, 11, 12], "seed_random": 5, "seed": [5, 28], "int": [5, 14, 19, 21, 22, 24, 25, 26, 28, 29], "faker": [5, 20], "random": [5, 11, 13, 21, 22, 24, 28], "integ": [5, 21, 24], "set": [5, 11, 19], "is_ignored_typ": 5, "check": 5, "ignor": [5, 14], "meant": [5, 14, 26], "overwritten": 5, "extens": 5, "get_provider_map": [5, 9, 10, 30], "distinct": [5, 9, 10], "allow": [5, 9, 10, 14, 17, 25, 28], "overrid": [5, 9, 10, 11, 30], "get_mock_valu": 5, "create_factori": [5, 26], "tupl": [5, 13, 21], "dynam": [5, 25, 26], "get_field_valu": [5, 6], "field_build_paramet": [5, 6], "exist": [5, 6], "otherwis": [5, 6], "should_set_none_valu": 5, "metadata": [5, 7, 9, 11, 12, 13], "should_set_field_valu": [5, 11], "field_nam": [5, 11], "get_model_field": [5, 7, 9, 11, 12], "list": [5, 6, 7, 9, 11, 12, 13, 16, 19, 25, 26, 28, 29, 32], "retriev": [5, 7, 9, 11, 12], "process_kwarg": 5, "process": [5, 25], "result": [5, 14, 16, 18, 22, 24, 25, 28, 29], "size": [5, 14, 25, 28, 29], "n": [5, 25], "create_sync": [5, 25], "persist": [5, 6, 15], "synchron": [5, 16, 25], "singl": [5, 6, 16, 25], "create_batch_sync": [5, 25], "async": [5, 6, 16, 25], "create_async": [5, 25], "asynchron": [5, 16, 25], "create_batch_async": [5, 25], "beaniepersistencehandl": 6, "asyncpersistenceprotocol": [6, 16, 25], "handler": 6, "save": [6, 16, 25], "save_mani": [6, 16, 25], "multipl": [6, 16, 21], "cannot": [6, 29, 30], "insert_mani": 6, "here": [6, 25], "doesn": 6, "beaniedocumentfactori": [6, 32], "document": [6, 25, 32], "base_factori": 8, "dataclass_factori": 8, "typed_dict_factori": 8, "pydantic_factori": [8, 26, 32], "msgspec_factori": 8, "odmantic_odm_factori": 8, "beanie_odm_factori": 8, "msgspecfactori": [9, 32], "get_constraint": 9, "field_typ": 9, "iter": 9, "constraint": [9, 13, 20, 21, 24], "get": [9, 21, 26, 28], "get_collection_type_annot": 9, "msgspec_collection_typ": 9, "collectiontyp": 9, "collect": [9, 19], "get_annot": 9, "msgspec_typ": 9, "parse_field": 9, "odmanticmodelfactori": [10, 32], "is_pydantic_model": 11, "basemodel": [11, 26], "guard": 11, "pydanticfieldmeta": 11, "handl": [11, 18, 21, 22, 31], "pydant": [11, 18, 21, 22, 26, 32], "modelfield": 11, "from_field_info": 11, "field_info": 11, "fieldinfo": 11, "use_alia": 11, "info": [11, 18], "alia": 11, "from_model_field": 11, "model_field": 11, "factory_use_construct": 11, "fals": [11, 17, 19, 22, 24], "valid": [11, 21, 28], "made": 11, "instanti": 11, "onli": [11, 25, 28, 32], "is_custom_root_field": 11, "typeddictfactori": [12, 26, 28, 32], "typeddictt": 12, "typeddict": [12, 13, 14, 26, 28], "null": 13, "sentinel": 13, "empti": 13, "urlconstraint": 13, "regard": 13, "about": [13, 25], "default": [13, 28, 30], "children": 13, "properti": 13, "type_arg": 13, "arg": [13, 14, 16, 21, 28], "from_typ": 13, "builder": 13, "wrappedcal": 14, "ref": 14, "util": 14, "prevent": 14, "bind": 14, "mark": 14, "attribut": [14, 25, 27, 28], "time": [14, 28, 32], "p": 14, "invok": [14, 28], "whenev": 14, "fn": 14, "to_valu": 14, "output": [14, 21], "after": [14, 27], "design": [14, 28], "post": [14, 27, 28], "callback": [14, 21], "fixtur": [14, 17, 31], "pytest": [14, 17, 28, 31], "regist": [14, 17, 29], "call": [14, 25, 28, 29], "rais": [14, 28], "constant": 15, "except": [15, 28], "decor": [15, 17, 26, 29, 31], "pytest_plugin": [15, 29], "value_gener": [15, 18, 19, 20, 21, 22, 24], "syncpersistenceprotocol": [16, 25], "protocol": [16, 21], "sync": [16, 25, 28], "factoryfixtur": 17, "scope": [17, 28], "function": [17, 21, 25, 28], "autous": 17, "register_fixtur": [17, 29], "auto": 17, "handle_collection_typ": 18, "container_typ": 18, "recurs": 18, "accept": [18, 19, 29], "argument": [18, 19], "handle_complex_typ": 18, "graph": 18, "like": [18, 28], "structur": 18, "handle_constrained_collect": 19, "collection_typ": 19, "item_typ": 19, "max_item": 19, "min_item": 19, "unique_item": 19, "constrain": [19, 21, 22], "item": 19, "maxim": [19, 21], "number": [19, 21], "uniqu": 19, "handle_constrained_d": 20, "ge": [20, 21], "date": [20, 25, 26, 28, 29], "gt": [20, 21], "le": [20, 21], "lt": [20, 21], "fulfil": [20, 26], "expect": 20, "less": [20, 21], "equal": [20, 21], "greater": [20, 21], "numbergeneratorprotocol": 21, "numer": 21, "__call__": 21, "minimum": [21, 22, 24], "maximum": [21, 22, 24], "signatur": [21, 28], "almost_equal_float": 21, "value_1": 21, "value_2": 21, "delta": [21, 28], "1e": 21, "08": 21, "true": [21, 25, 30], "two": 21, "consid": 21, "problemat": 21, "comparison": 21, "is_multiply_of_multiple_of_in_rang": 21, "multiple_of": 21, "least": 21, "multipli": 21, "li": 21, "rang": [21, 28], "between": 21, "passes_pydantic_multiple_valid": 21, "anoth": 21, "get_incr": 21, "t_type": [21, 22], "small": 21, "e": [21, 28, 32], "entri": 21, "get_value_or_non": 21, "equal_valu": 21, "get_constrained_number_rang": 21, "primit": [21, 23], "decim": [21, 24], "generate_constrained_numb": 21, "handle_constrained_int": 21, "handle_constrained_float": 21, "validate_max_digit": 21, "max_digit": 21, "decimal_plac": 21, "max": 21, "digit": 21, "place": [21, 25, 30], "handle_decimal_length": 21, "generated_decim": 21, "length": [21, 22, 24], "handle_constrained_decim": 21, "handle_constrained_string_or_byt": 22, "lower_cas": [22, 24], "upper_cas": [22, 24], "min_length": [22, 24], "max_length": [22, 24], "pattern": [22, 28], "string": [22, 24, 30], "byte": [22, 24], "constr": 22, "conbyt": 22, "lowercas": [22, 24], "uppercas": [22, 24], "regex": 22, "complex_typ": 23, "constrained_collect": 23, "constrained_d": 23, "constrained_numb": 23, "constrained_str": 23, "create_random_float": 24, "create_random_integ": 24, "create_random_decim": 24, "create_random_byt": 24, "create_random_str": 24, "create_random_boolean": 24, "special": [25, 30], "dunder": 25, "doubl": 25, "underscor": 25, "refer": [25, 30], "api": [25, 28], "below": [25, 26], "discuss": 25, "some": [25, 30], "depth": 25, "__random_seed__": 25, "__random__": [25, 27, 28], "choic": [25, 28], "john": 25, "alic": 25, "georg": 25, "test_random_se": 25, "outcom": 25, "determinist": 25, "ha": [25, 28], "been": 25, "control": [25, 28, 29], "produc": 25, "affect": [25, 28], "all": [25, 27, 28, 32], "10": 25, "test_setting_random": 25, "ident": 25, "previou": 25, "differ": 25, "being": [25, 28], "actual": 25, "embed": 25, "insid": [25, 26], "complex": 25, "__faker__": [25, 27], "local": 25, "es_": 25, "cl": [25, 27, 28, 30], "test_setting_fak": 25, "spanish": 25, "asunci\u00f3n": 25, "c\u00e9spede": 25, "abov": [25, 28, 29, 30, 32], "understand": [25, 28], "why": 25, "see": 25, "four": 25, "must": [25, 27, 29], "specifi": 25, "asyncio": 25, "sleep": 25, "uuid": [25, 26, 28, 29, 30], "id": [25, 26, 28, 29, 30], "mock_db": 25, "syncpersistencehandl": 25, "stuff": 25, "orm": 25, "cach": 25, "redi": 25, "our": [25, 30], "case": [25, 28, 30, 32], "simpli": 25, "same": [25, 26], "asyncpersistencehandl": 25, "await": 25, "0001": 25, "again": 25, "__sync_persistence__": 25, "__async_persistence__": 25, "test_sync_persistence_build": 25, "test_sync_persistence_batch": 25, "person_batch": 25, "test_async_persistence_build": 25, "test_async_persistence_batch": 25, "With": 25, "now": [25, 27, 28], "respect": [25, 32], "explain": 25, "section": 25, "declar": [25, 28, 29, 31], "intervent": 25, "user": [25, 26], "reus": 25, "For": [25, 26, 27, 28], "petfactori": [25, 26, 28], "datetim": [25, 26, 27, 28, 29], "enum": [25, 26, 28], "speci": [25, 26, 28], "cat": [25, 26, 28], "dog": [25, 26, 28], "pet": [25, 26, 28], "sound": [25, 26, 28], "hobbi": [25, 26, 28, 29], "birthdai": [25, 26, 28, 29], "asset": [25, 26, 28], "test_dynamic_factory_gener": [25, 26], "len": [25, 26, 28, 29, 30], "__set_as_default_factory_for_type__": 25, "roxi": [25, 28], "spammi": 25, "mosh": 25, "test_default_pet_factori": 25, "defin": [26, 28], "done": 26, "syntax": 26, "appli": 26, "export": [26, 28, 32], "Or": [26, 28], "3rd": [26, 30], "parti": [26, 30], "implement": 26, "long": 26, "stdlib": [26, 28], "interfac": 26, "although": 26, "primarili": 26, "expos": 26, "intern": 26, "test_imperative_factory_cr": 26, "pet_factori": 26, "pet_inst": [26, 28], "current": 27, "usual": 27, "timedelta": [27, 28], "cast": 27, "datetimerang": [27, 28], "to_dt": [27, 28], "from_dt": [27, 28], "default_factori": [27, 28], "datetimerangefactori": [27, 28], "time_delta": 27, "3d": 27, "test_post_gener": [27, 28], "date_range_inst": [27, 28], "dai": [27, 28], "semant": 28, "nonetheless": 28, "cover": 28, "few": 28, "hardcod": [28, 30], "woof": 28, "test_is_pet_inst": 28, "randomli": 28, "though": 28, "often": 28, "desir": 28, "could": 28, "instead": 28, "restrict": [28, 29], "ralph": 28, "test_pet_choic": 28, "mere": 28, "cleaner": 28, "simpler": 28, "fact": 28, "includ": [28, 32], "thu": 28, "write": 28, "so": [28, 30, 32], "lambda": [28, 30], "easi": 28, "nice": 28, "access": [28, 29], "itself": [28, 29], "intent": 28, "while": 28, "own": [28, 30], "attach": 28, "sever": 28, "wai": 28, "g": [28, 32], "consist": 28, "rather": 28, "global": 28, "complet": 28, "test_id_is_ignor": 28, "test_id_is_requir": 28, "alreadi": 28, "non": 28, "most": 28, "best": 28, "avoid": 28, "helper": 28, "add_timedelta": 28, "cb": 28, "receiv": 28, "register_fixture_decor": 29, "nick": 29, "test_person_factori": 29, "person_factori": 29, "overcom": 29, "separ": 29, "without": 29, "person_factory_fixtur": 29, "still": 29, "another_person_inst": 29, "alias": 29, "aliased_person_factori": 29, "classroom": 29, "teacher": 29, "pupil": 29, "classroomfactori": 29, "ludmilla": 29, "newman": 29, "20": 29, "test_fixture_field": 29, "classroom_inst": 29, "similar": 29, "propag": 29, "sometim": 30, "either": 30, "codebas": 30, "achiev": 30, "extend": [30, 32], "what": 30, "providers_map": 30, "code": 30, "customsecret": 30, "__repr__": 30, "__str__": 30, "secret": 30, "unknown": 30, "super": 30, "jeronimo": 30, "test_custom_secret_cr": 30, "repr": 30, "each": 30, "appropri": 30, "great": 30, "localis": 30, "fashion": 30, "mani": 30, "lead": 30, "unnecessari": 30, "duplic": 30, "solut": 30, "typevar": 30, "customdataclassfactori": 30, "__is_base_factory__": 30, "test_custom_dataclass_base_factori": 30, "These": 32, "thei": 32, "namespac": 32, "modul": 32, "ad": 32, "packag": 32, "checkout": 32}, "objects": {"polyfactory": [[2, 0, 0, "-", "constants"], [3, 0, 0, "-", "decorators"], [4, 0, 0, "-", "exceptions"], [13, 0, 0, "-", "field_meta"], [14, 0, 0, "-", "fields"], [16, 0, 0, "-", "persistence"], [17, 0, 0, "-", "pytest_plugin"]], "polyfactory.decorators": [[3, 1, 1, "", "post_generated"]], "polyfactory.decorators.post_generated": [[3, 2, 1, "", "__init__"]], "polyfactory.exceptions": [[4, 3, 1, "", "ConfigurationException"], [4, 3, 1, "", "FactoryException"], [4, 3, 1, "", "MissingBuildKwargException"], [4, 3, 1, "", "MissingDependencyException"], [4, 3, 1, "", "ParameterException"]], "polyfactory.factories": [[5, 0, 0, "-", "base"], [6, 0, 0, "-", "beanie_odm_factory"], [7, 0, 0, "-", "dataclass_factory"], [9, 0, 0, "-", "msgspec_factory"], [10, 0, 0, "-", "odmantic_odm_factory"], [11, 0, 0, "-", "pydantic_factory"], [12, 0, 0, "-", "typed_dict_factory"]], "polyfactory.factories.base": [[5, 1, 1, "", "BaseFactory"], [5, 4, 1, "", "is_factory"]], "polyfactory.factories.base.BaseFactory": [[5, 2, 1, "", "batch"], [5, 2, 1, "", "build"], [5, 2, 1, "", "create_async"], [5, 2, 1, "", "create_batch_async"], [5, 2, 1, "", "create_batch_sync"], [5, 2, 1, "", "create_factory"], [5, 2, 1, "", "create_sync"], [5, 2, 1, "", "extract_field_build_parameters"], [5, 2, 1, "", "get_field_value"], [5, 2, 1, "", "get_mock_value"], [5, 2, 1, "", "get_model_fields"], [5, 2, 1, "", "get_provider_map"], [5, 2, 1, "", "is_batch_factory_type"], [5, 2, 1, "", "is_factory_type"], [5, 2, 1, "", "is_ignored_type"], [5, 2, 1, "", "is_supported_type"], [5, 2, 1, "", "process_kwargs"], [5, 2, 1, "", "seed_random"], [5, 2, 1, "", "should_set_field_value"], [5, 2, 1, "", "should_set_none_value"]], "polyfactory.factories.beanie_odm_factory": [[6, 1, 1, "", "BeanieDocumentFactory"], [6, 1, 1, "", "BeaniePersistenceHandler"]], "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory": [[6, 2, 1, "", "get_field_value"], [6, 2, 1, "", "is_supported_type"]], "polyfactory.factories.beanie_odm_factory.BeaniePersistenceHandler": [[6, 2, 1, "", "save"], [6, 2, 1, "", "save_many"]], "polyfactory.factories.dataclass_factory": [[7, 1, 1, "", "DataclassFactory"]], "polyfactory.factories.dataclass_factory.DataclassFactory": [[7, 2, 1, "", "get_model_fields"], [7, 2, 1, "", "is_supported_type"]], "polyfactory.factories.msgspec_factory": [[9, 1, 1, "", "MsgspecFactory"]], "polyfactory.factories.msgspec_factory.MsgspecFactory": [[9, 2, 1, "", "get_annotation"], [9, 2, 1, "", "get_collection_type_annotation"], [9, 2, 1, "", "get_constraints"], [9, 2, 1, "", "get_model_fields"], [9, 2, 1, "", "get_provider_map"], [9, 2, 1, "", "is_supported_type"], [9, 2, 1, "", "parse_field"]], "polyfactory.factories.odmantic_odm_factory": [[10, 1, 1, "", "OdmanticModelFactory"]], "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory": [[10, 2, 1, "", "get_provider_map"], [10, 2, 1, "", "is_supported_type"]], "polyfactory.factories.pydantic_factory": [[11, 1, 1, "", "ModelFactory"], [11, 1, 1, "", "PydanticFieldMeta"], [11, 4, 1, "", "is_pydantic_model"]], "polyfactory.factories.pydantic_factory.ModelFactory": [[11, 2, 1, "", "build"], [11, 2, 1, "", "get_model_fields"], [11, 2, 1, "", "is_custom_root_field"], [11, 2, 1, "", "is_supported_type"], [11, 2, 1, "", "should_set_field_value"]], "polyfactory.factories.pydantic_factory.PydanticFieldMeta": [[11, 2, 1, "", "from_field_info"], [11, 2, 1, "", "from_model_field"]], "polyfactory.factories.typed_dict_factory": [[12, 1, 1, "", "TypedDictFactory"]], "polyfactory.factories.typed_dict_factory.TypedDictFactory": [[12, 2, 1, "", "get_model_fields"], [12, 2, 1, "", "is_supported_type"]], "polyfactory.field_meta": [[13, 1, 1, "", "Constraints"], [13, 1, 1, "", "FieldMeta"], [13, 1, 1, "", "Null"], [13, 1, 1, "", "UrlConstraints"]], "polyfactory.field_meta.FieldMeta": [[13, 2, 1, "", "__init__"], [13, 2, 1, "", "from_type"], [13, 5, 1, "", "type_args"]], "polyfactory.fields": [[14, 1, 1, "", "Fixture"], [14, 1, 1, "", "Ignore"], [14, 1, 1, "", "PostGenerated"], [14, 1, 1, "", "Require"], [14, 1, 1, "", "Use"], [14, 1, 1, "", "WrappedCallable"]], "polyfactory.fields.Fixture": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "to_value"]], "polyfactory.fields.PostGenerated": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "to_value"]], "polyfactory.fields.Use": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "to_value"]], "polyfactory.persistence": [[16, 1, 1, "", "AsyncPersistenceProtocol"], [16, 1, 1, "", "SyncPersistenceProtocol"]], "polyfactory.persistence.AsyncPersistenceProtocol": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "save"], [16, 2, 1, "", "save_many"]], "polyfactory.persistence.SyncPersistenceProtocol": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "save"], [16, 2, 1, "", "save_many"]], "polyfactory.pytest_plugin": [[17, 1, 1, "", "FactoryFixture"], [17, 4, 1, "", "register_fixture"]], "polyfactory.pytest_plugin.FactoryFixture": [[17, 2, 1, "", "__init__"]], "polyfactory.value_generators": [[18, 0, 0, "-", "complex_types"], [19, 0, 0, "-", "constrained_collections"], [20, 0, 0, "-", "constrained_dates"], [21, 0, 0, "-", "constrained_numbers"], [22, 0, 0, "-", "constrained_strings"], [24, 0, 0, "-", "primitives"]], "polyfactory.value_generators.complex_types": [[18, 4, 1, "", "handle_collection_type"], [18, 4, 1, "", "handle_complex_type"]], "polyfactory.value_generators.constrained_collections": [[19, 4, 1, "", "handle_constrained_collection"]], "polyfactory.value_generators.constrained_dates": [[20, 4, 1, "", "handle_constrained_date"]], "polyfactory.value_generators.constrained_numbers": [[21, 1, 1, "", "NumberGeneratorProtocol"], [21, 4, 1, "", "almost_equal_floats"], [21, 4, 1, "", "generate_constrained_number"], [21, 4, 1, "", "get_constrained_number_range"], [21, 4, 1, "", "get_increment"], [21, 4, 1, "", "get_value_or_none"], [21, 4, 1, "", "handle_constrained_decimal"], [21, 4, 1, "", "handle_constrained_float"], [21, 4, 1, "", "handle_constrained_int"], [21, 4, 1, "", "handle_decimal_length"], [21, 4, 1, "", "is_multiply_of_multiple_of_in_range"], [21, 4, 1, "", "passes_pydantic_multiple_validator"], [21, 4, 1, "", "validate_max_digits"]], "polyfactory.value_generators.constrained_numbers.NumberGeneratorProtocol": [[21, 2, 1, "", "__call__"], [21, 2, 1, "", "__init__"]], "polyfactory.value_generators.constrained_strings": [[22, 4, 1, "", "handle_constrained_string_or_bytes"]], "polyfactory.value_generators.primitives": [[24, 4, 1, "", "create_random_boolean"], [24, 4, 1, "", "create_random_bytes"], [24, 4, 1, "", "create_random_decimal"], [24, 4, 1, "", "create_random_float"], [24, 4, 1, "", "create_random_integer"], [24, 4, 1, "", "create_random_string"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:exception", "4": "py:function", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "exception", "Python exception"], "4": ["py", "function", "Python function"], "5": ["py", "property", "Python property"]}, "titleterms": {"contribut": 0, "set": [0, 25], "up": 0, "environ": 0, "code": 0, "workflow": 0, "project": 0, "document": 0, "doc": 0, "theme": 0, "appear": 0, "run": 0, "local": 0, "write": 0, "edit": 0, "creat": [0, 30], "new": 0, "releas": 0, "polyfactori": [1, 32], "instal": 1, "relat": 1, "pydant": 1, "factori": [1, 8, 25, 26, 28, 30, 32], "exampl": 1, "constant": 2, "decor": [3, 27], "except": 4, "base_factori": 5, "beanie_odm_factori": 6, "dataclass_factori": 7, "msgspec_factori": 9, "odmantic_odm_factori": 10, "pydantic_factori": 11, "typed_dict_factori": 12, "field_meta": 13, "field": [14, 28, 29], "api": 15, "refer": 15, "persist": [16, 25], "pytest_plugin": 17, "complex_typ": 18, "constrained_collect": 19, "constrained_d": 20, "constrained_numb": 21, "constrained_str": 22, "value_gener": 23, "primit": 24, "configur": 25, "seed": 25, "random": 25, "faker": 25, "handler": 25, "defin": 25, "default": 25, "declar": 26, "imper": 26, "creation": 26, "The": [27, 28, 29], "post_gener": 27, "us": 28, "ignor": 28, "requir": 28, "postgener": 28, "pytest": 29, "fixtur": 29, "handl": 30, "custom": 30, "type": 30, "base": 30, "usag": 31, "guid": 31}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"field_meta": [[13, "module-polyfactory.field_meta"]], "constrained_dates": [[20, "module-polyfactory.value_generators.constrained_dates"]], "constrained_strings": [[22, "module-polyfactory.value_generators.constrained_strings"]], "persistence": [[16, "module-polyfactory.persistence"]], "value_generators": [[23, "value-generators"]], "typed_dict_factory": [[12, "module-polyfactory.factories.typed_dict_factory"]], "constrained_collections": [[19, "module-polyfactory.value_generators.constrained_collections"]], "constrained_numbers": [[21, "module-polyfactory.value_generators.constrained_numbers"]], "API Reference": [[15, "api-reference"]], "complex_types": [[18, "module-polyfactory.value_generators.complex_types"]], "pytest_plugin": [[17, "module-polyfactory.pytest_plugin"]], "fields": [[14, "module-polyfactory.fields"]], "odmantic_odm_factory": [[10, "module-polyfactory.factories.odmantic_odm_factory"]], "msgspec_factory": [[9, "module-polyfactory.factories.msgspec_factory"]], "pydantic_factory": [[11, "module-polyfactory.factories.pydantic_factory"]], "beanie_odm_factory": [[6, "module-polyfactory.factories.beanie_odm_factory"]], "dataclass_factory": [[7, "module-polyfactory.factories.dataclass_factory"]], "exceptions": [[4, "module-polyfactory.exceptions"]], "Contributing": [[0, "contributing"]], "Setting up the environment": [[0, "setting-up-the-environment"]], "Code contributions": [[0, "code-contributions"]], "Workflow": [[0, "workflow"]], "Project documentation": [[0, "project-documentation"]], "Docs theme and appearance": [[0, "docs-theme-and-appearance"]], "Running the docs locally": [[0, "running-the-docs-locally"]], "Writing and editing docs": [[0, "writing-and-editing-docs"]], "Creating a new release": [[0, "creating-a-new-release"]], "constants": [[2, "constants"]], "decorators": [[3, "module-polyfactory.decorators"]], "factories": [[8, "factories"]], "Polyfactory": [[1, "polyfactory"]], "Installation": [[1, "installation"]], "Relation to Pydantic-Factories": [[1, "relation-to-pydantic-factories"]], "Example": [[1, "example"]], "base_factory": [[5, "module-polyfactory.factories.base"]], "Factory Fields": [[28, "factory-fields"]], "The Use Field": [[28, "the-use-field"]], "The Ignore Field": [[28, "the-ignore-field"]], "The Require Field": [[28, "the-require-field"]], "The PostGenerated Field": [[28, "the-postgenerated-field"]], "Factory Configuration": [[25, "factory-configuration"]], "Seeding Randomness": [[25, "seeding-randomness"]], "Setting Random": [[25, "setting-random"]], "Setting Faker": [[25, "setting-faker"]], "Persistence Handlers": [[25, "persistence-handlers"]], "Defining Default Factories": [[25, "defining-default-factories"]], "Usage Guide": [[31, "usage-guide"]], "Polyfactory Factories": [[32, "polyfactory-factories"]], "Pytest fixtures": [[29, "pytest-fixtures"]], "The Fixture Field": [[29, "the-fixture-field"]], "Declaring Factories": [[26, "declaring-factories"]], "Imperative Factory Creation": [[26, "imperative-factory-creation"]], "Handling Custom Types": [[30, "handling-custom-types"]], "Creating Custom Base Factories": [[30, "creating-custom-base-factories"]], "primitives": [[24, "module-polyfactory.value_generators.primitives"]], "The post_generated decorator": [[27, "the-post-generated-decorator"]]}, "indexentries": {"module": [[2, "module-polyfactory.constants"], [3, "module-polyfactory.decorators"], [4, "module-polyfactory.exceptions"], [5, "module-polyfactory.factories.base"], [6, "module-polyfactory.factories.beanie_odm_factory"], [7, "module-polyfactory.factories.dataclass_factory"], [9, "module-polyfactory.factories.msgspec_factory"], [10, "module-polyfactory.factories.odmantic_odm_factory"], [11, "module-polyfactory.factories.pydantic_factory"], [12, "module-polyfactory.factories.typed_dict_factory"], [13, "module-polyfactory.field_meta"], [14, "module-polyfactory.fields"], [16, "module-polyfactory.persistence"], [17, "module-polyfactory.pytest_plugin"], [18, "module-polyfactory.value_generators.complex_types"], [19, "module-polyfactory.value_generators.constrained_collections"], [20, "module-polyfactory.value_generators.constrained_dates"], [21, "module-polyfactory.value_generators.constrained_numbers"], [22, "module-polyfactory.value_generators.constrained_strings"], [24, "module-polyfactory.value_generators.primitives"]], "polyfactory.constants": [[2, "module-polyfactory.constants"]], "__init__() (polyfactory.decorators.post_generated method)": [[3, "polyfactory.decorators.post_generated.__init__"]], "polyfactory.decorators": [[3, "module-polyfactory.decorators"]], "post_generated (class in polyfactory.decorators)": [[3, "polyfactory.decorators.post_generated"]], "configurationexception": [[4, "polyfactory.exceptions.ConfigurationException"]], "factoryexception": [[4, "polyfactory.exceptions.FactoryException"]], "missingbuildkwargexception": [[4, "polyfactory.exceptions.MissingBuildKwargException"]], "missingdependencyexception": [[4, "polyfactory.exceptions.MissingDependencyException"]], "parameterexception": [[4, "polyfactory.exceptions.ParameterException"]], "polyfactory.exceptions": [[4, "module-polyfactory.exceptions"]], "basefactory (class in polyfactory.factories.base)": [[5, "polyfactory.factories.base.BaseFactory"]], "batch() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.batch"]], "build() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.build"]], "create_async() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.create_async"]], "create_batch_async() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.create_batch_async"]], "create_batch_sync() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.create_batch_sync"]], "create_factory() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.create_factory"]], "create_sync() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.create_sync"]], "extract_field_build_parameters() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.extract_field_build_parameters"]], "get_field_value() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.get_field_value"]], "get_mock_value() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.get_mock_value"]], "get_model_fields() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.get_model_fields"]], "get_provider_map() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.get_provider_map"]], "is_batch_factory_type() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.is_batch_factory_type"]], "is_factory() (in module polyfactory.factories.base)": [[5, "polyfactory.factories.base.is_factory"]], "is_factory_type() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.is_factory_type"]], "is_ignored_type() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.is_ignored_type"]], "is_supported_type() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.is_supported_type"]], "polyfactory.factories.base": [[5, "module-polyfactory.factories.base"]], "process_kwargs() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.process_kwargs"]], "seed_random() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.seed_random"]], "should_set_field_value() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.should_set_field_value"]], "should_set_none_value() (polyfactory.factories.base.basefactory class method)": [[5, "polyfactory.factories.base.BaseFactory.should_set_none_value"]], "beaniedocumentfactory (class in polyfactory.factories.beanie_odm_factory)": [[6, "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory"]], "beaniepersistencehandler (class in polyfactory.factories.beanie_odm_factory)": [[6, "polyfactory.factories.beanie_odm_factory.BeaniePersistenceHandler"]], "get_field_value() (polyfactory.factories.beanie_odm_factory.beaniedocumentfactory class method)": [[6, "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory.get_field_value"]], "is_supported_type() (polyfactory.factories.beanie_odm_factory.beaniedocumentfactory class method)": [[6, "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory.is_supported_type"]], "polyfactory.factories.beanie_odm_factory": [[6, "module-polyfactory.factories.beanie_odm_factory"]], "save() (polyfactory.factories.beanie_odm_factory.beaniepersistencehandler method)": [[6, "polyfactory.factories.beanie_odm_factory.BeaniePersistenceHandler.save"]], "save_many() (polyfactory.factories.beanie_odm_factory.beaniepersistencehandler method)": [[6, "polyfactory.factories.beanie_odm_factory.BeaniePersistenceHandler.save_many"]], "dataclassfactory (class in polyfactory.factories.dataclass_factory)": [[7, "polyfactory.factories.dataclass_factory.DataclassFactory"]], "get_model_fields() (polyfactory.factories.dataclass_factory.dataclassfactory class method)": [[7, "polyfactory.factories.dataclass_factory.DataclassFactory.get_model_fields"]], "is_supported_type() (polyfactory.factories.dataclass_factory.dataclassfactory class method)": [[7, "polyfactory.factories.dataclass_factory.DataclassFactory.is_supported_type"]], "polyfactory.factories.dataclass_factory": [[7, "module-polyfactory.factories.dataclass_factory"]], "msgspecfactory (class in polyfactory.factories.msgspec_factory)": [[9, "polyfactory.factories.msgspec_factory.MsgspecFactory"]], "get_annotation() (polyfactory.factories.msgspec_factory.msgspecfactory class method)": [[9, "polyfactory.factories.msgspec_factory.MsgspecFactory.get_annotation"]], "get_collection_type_annotation() (polyfactory.factories.msgspec_factory.msgspecfactory class method)": [[9, "polyfactory.factories.msgspec_factory.MsgspecFactory.get_collection_type_annotation"]], "get_constraints() (polyfactory.factories.msgspec_factory.msgspecfactory class method)": [[9, "polyfactory.factories.msgspec_factory.MsgspecFactory.get_constraints"]], "get_model_fields() (polyfactory.factories.msgspec_factory.msgspecfactory class method)": [[9, "polyfactory.factories.msgspec_factory.MsgspecFactory.get_model_fields"]], "get_provider_map() (polyfactory.factories.msgspec_factory.msgspecfactory class method)": [[9, "polyfactory.factories.msgspec_factory.MsgspecFactory.get_provider_map"]], "is_supported_type() (polyfactory.factories.msgspec_factory.msgspecfactory class method)": [[9, "polyfactory.factories.msgspec_factory.MsgspecFactory.is_supported_type"]], "parse_field() (polyfactory.factories.msgspec_factory.msgspecfactory class method)": [[9, "polyfactory.factories.msgspec_factory.MsgspecFactory.parse_field"]], "polyfactory.factories.msgspec_factory": [[9, "module-polyfactory.factories.msgspec_factory"]], "odmanticmodelfactory (class in polyfactory.factories.odmantic_odm_factory)": [[10, "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory"]], "get_provider_map() (polyfactory.factories.odmantic_odm_factory.odmanticmodelfactory class method)": [[10, "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory.get_provider_map"]], "is_supported_type() (polyfactory.factories.odmantic_odm_factory.odmanticmodelfactory class method)": [[10, "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory.is_supported_type"]], "polyfactory.factories.odmantic_odm_factory": [[10, "module-polyfactory.factories.odmantic_odm_factory"]], "modelfactory (class in polyfactory.factories.pydantic_factory)": [[11, "polyfactory.factories.pydantic_factory.ModelFactory"]], "pydanticfieldmeta (class in polyfactory.factories.pydantic_factory)": [[11, "polyfactory.factories.pydantic_factory.PydanticFieldMeta"]], "build() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[11, "polyfactory.factories.pydantic_factory.ModelFactory.build"]], "from_field_info() (polyfactory.factories.pydantic_factory.pydanticfieldmeta class method)": [[11, "polyfactory.factories.pydantic_factory.PydanticFieldMeta.from_field_info"]], "from_model_field() (polyfactory.factories.pydantic_factory.pydanticfieldmeta class method)": [[11, "polyfactory.factories.pydantic_factory.PydanticFieldMeta.from_model_field"]], "get_model_fields() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[11, "polyfactory.factories.pydantic_factory.ModelFactory.get_model_fields"]], "is_custom_root_field() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[11, "polyfactory.factories.pydantic_factory.ModelFactory.is_custom_root_field"]], "is_pydantic_model() (in module polyfactory.factories.pydantic_factory)": [[11, "polyfactory.factories.pydantic_factory.is_pydantic_model"]], "is_supported_type() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[11, "polyfactory.factories.pydantic_factory.ModelFactory.is_supported_type"]], "polyfactory.factories.pydantic_factory": [[11, "module-polyfactory.factories.pydantic_factory"]], "should_set_field_value() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[11, "polyfactory.factories.pydantic_factory.ModelFactory.should_set_field_value"]], "typeddictfactory (class in polyfactory.factories.typed_dict_factory)": [[12, "polyfactory.factories.typed_dict_factory.TypedDictFactory"]], "get_model_fields() (polyfactory.factories.typed_dict_factory.typeddictfactory class method)": [[12, "polyfactory.factories.typed_dict_factory.TypedDictFactory.get_model_fields"]], "is_supported_type() (polyfactory.factories.typed_dict_factory.typeddictfactory class method)": [[12, "polyfactory.factories.typed_dict_factory.TypedDictFactory.is_supported_type"]], "polyfactory.factories.typed_dict_factory": [[12, "module-polyfactory.factories.typed_dict_factory"]], "constraints (class in polyfactory.field_meta)": [[13, "polyfactory.field_meta.Constraints"]], "fieldmeta (class in polyfactory.field_meta)": [[13, "polyfactory.field_meta.FieldMeta"]], "null (class in polyfactory.field_meta)": [[13, "polyfactory.field_meta.Null"]], "urlconstraints (class in polyfactory.field_meta)": [[13, "polyfactory.field_meta.UrlConstraints"]], "__init__() (polyfactory.field_meta.fieldmeta method)": [[13, "polyfactory.field_meta.FieldMeta.__init__"]], "from_type() (polyfactory.field_meta.fieldmeta class method)": [[13, "polyfactory.field_meta.FieldMeta.from_type"]], "polyfactory.field_meta": [[13, "module-polyfactory.field_meta"]], "type_args (polyfactory.field_meta.fieldmeta property)": [[13, "polyfactory.field_meta.FieldMeta.type_args"]], "fixture (class in polyfactory.fields)": [[14, "polyfactory.fields.Fixture"]], "ignore (class in polyfactory.fields)": [[14, "polyfactory.fields.Ignore"]], "postgenerated (class in polyfactory.fields)": [[14, "polyfactory.fields.PostGenerated"]], "require (class in polyfactory.fields)": [[14, "polyfactory.fields.Require"]], "use (class in polyfactory.fields)": [[14, "polyfactory.fields.Use"]], "wrappedcallable (class in polyfactory.fields)": [[14, "polyfactory.fields.WrappedCallable"]], "__init__() (polyfactory.fields.fixture method)": [[14, "polyfactory.fields.Fixture.__init__"]], "__init__() (polyfactory.fields.postgenerated method)": [[14, "polyfactory.fields.PostGenerated.__init__"]], "__init__() (polyfactory.fields.use method)": [[14, "polyfactory.fields.Use.__init__"]], "polyfactory.fields": [[14, "module-polyfactory.fields"]], "to_value() (polyfactory.fields.fixture method)": [[14, "polyfactory.fields.Fixture.to_value"]], "to_value() (polyfactory.fields.postgenerated method)": [[14, "polyfactory.fields.PostGenerated.to_value"]], "to_value() (polyfactory.fields.use method)": [[14, "polyfactory.fields.Use.to_value"]], "asyncpersistenceprotocol (class in polyfactory.persistence)": [[16, "polyfactory.persistence.AsyncPersistenceProtocol"]], "syncpersistenceprotocol (class in polyfactory.persistence)": [[16, "polyfactory.persistence.SyncPersistenceProtocol"]], "__init__() (polyfactory.persistence.asyncpersistenceprotocol method)": [[16, "polyfactory.persistence.AsyncPersistenceProtocol.__init__"]], "__init__() (polyfactory.persistence.syncpersistenceprotocol method)": [[16, "polyfactory.persistence.SyncPersistenceProtocol.__init__"]], "polyfactory.persistence": [[16, "module-polyfactory.persistence"]], "save() (polyfactory.persistence.asyncpersistenceprotocol method)": [[16, "polyfactory.persistence.AsyncPersistenceProtocol.save"]], "save() (polyfactory.persistence.syncpersistenceprotocol method)": [[16, "polyfactory.persistence.SyncPersistenceProtocol.save"]], "save_many() (polyfactory.persistence.asyncpersistenceprotocol method)": [[16, "polyfactory.persistence.AsyncPersistenceProtocol.save_many"]], "save_many() (polyfactory.persistence.syncpersistenceprotocol method)": [[16, "polyfactory.persistence.SyncPersistenceProtocol.save_many"]], "factoryfixture (class in polyfactory.pytest_plugin)": [[17, "polyfactory.pytest_plugin.FactoryFixture"]], "__init__() (polyfactory.pytest_plugin.factoryfixture method)": [[17, "polyfactory.pytest_plugin.FactoryFixture.__init__"]], "polyfactory.pytest_plugin": [[17, "module-polyfactory.pytest_plugin"]], "register_fixture() (in module polyfactory.pytest_plugin)": [[17, "polyfactory.pytest_plugin.register_fixture"]], "handle_collection_type() (in module polyfactory.value_generators.complex_types)": [[18, "polyfactory.value_generators.complex_types.handle_collection_type"]], "handle_complex_type() (in module polyfactory.value_generators.complex_types)": [[18, "polyfactory.value_generators.complex_types.handle_complex_type"]], "polyfactory.value_generators.complex_types": [[18, "module-polyfactory.value_generators.complex_types"]], "handle_constrained_collection() (in module polyfactory.value_generators.constrained_collections)": [[19, "polyfactory.value_generators.constrained_collections.handle_constrained_collection"]], "polyfactory.value_generators.constrained_collections": [[19, "module-polyfactory.value_generators.constrained_collections"]], "handle_constrained_date() (in module polyfactory.value_generators.constrained_dates)": [[20, "polyfactory.value_generators.constrained_dates.handle_constrained_date"]], "polyfactory.value_generators.constrained_dates": [[20, "module-polyfactory.value_generators.constrained_dates"]], "numbergeneratorprotocol (class in polyfactory.value_generators.constrained_numbers)": [[21, "polyfactory.value_generators.constrained_numbers.NumberGeneratorProtocol"]], "__call__() (polyfactory.value_generators.constrained_numbers.numbergeneratorprotocol method)": [[21, "polyfactory.value_generators.constrained_numbers.NumberGeneratorProtocol.__call__"]], "__init__() (polyfactory.value_generators.constrained_numbers.numbergeneratorprotocol method)": [[21, "polyfactory.value_generators.constrained_numbers.NumberGeneratorProtocol.__init__"]], "almost_equal_floats() (in module polyfactory.value_generators.constrained_numbers)": [[21, "polyfactory.value_generators.constrained_numbers.almost_equal_floats"]], "generate_constrained_number() (in module polyfactory.value_generators.constrained_numbers)": [[21, "polyfactory.value_generators.constrained_numbers.generate_constrained_number"]], "get_constrained_number_range() (in module polyfactory.value_generators.constrained_numbers)": [[21, "polyfactory.value_generators.constrained_numbers.get_constrained_number_range"]], "get_increment() (in module polyfactory.value_generators.constrained_numbers)": [[21, "polyfactory.value_generators.constrained_numbers.get_increment"]], "get_value_or_none() (in module polyfactory.value_generators.constrained_numbers)": [[21, "polyfactory.value_generators.constrained_numbers.get_value_or_none"]], "handle_constrained_decimal() (in module polyfactory.value_generators.constrained_numbers)": [[21, "polyfactory.value_generators.constrained_numbers.handle_constrained_decimal"]], "handle_constrained_float() (in module polyfactory.value_generators.constrained_numbers)": [[21, "polyfactory.value_generators.constrained_numbers.handle_constrained_float"]], "handle_constrained_int() (in module polyfactory.value_generators.constrained_numbers)": [[21, "polyfactory.value_generators.constrained_numbers.handle_constrained_int"]], "handle_decimal_length() (in module polyfactory.value_generators.constrained_numbers)": [[21, "polyfactory.value_generators.constrained_numbers.handle_decimal_length"]], "is_multiply_of_multiple_of_in_range() (in module polyfactory.value_generators.constrained_numbers)": [[21, "polyfactory.value_generators.constrained_numbers.is_multiply_of_multiple_of_in_range"]], "passes_pydantic_multiple_validator() (in module polyfactory.value_generators.constrained_numbers)": [[21, "polyfactory.value_generators.constrained_numbers.passes_pydantic_multiple_validator"]], "polyfactory.value_generators.constrained_numbers": [[21, "module-polyfactory.value_generators.constrained_numbers"]], "validate_max_digits() (in module polyfactory.value_generators.constrained_numbers)": [[21, "polyfactory.value_generators.constrained_numbers.validate_max_digits"]], "handle_constrained_string_or_bytes() (in module polyfactory.value_generators.constrained_strings)": [[22, "polyfactory.value_generators.constrained_strings.handle_constrained_string_or_bytes"]], "polyfactory.value_generators.constrained_strings": [[22, "module-polyfactory.value_generators.constrained_strings"]], "create_random_boolean() (in module polyfactory.value_generators.primitives)": [[24, "polyfactory.value_generators.primitives.create_random_boolean"]], "create_random_bytes() (in module polyfactory.value_generators.primitives)": [[24, "polyfactory.value_generators.primitives.create_random_bytes"]], "create_random_decimal() (in module polyfactory.value_generators.primitives)": [[24, "polyfactory.value_generators.primitives.create_random_decimal"]], "create_random_float() (in module polyfactory.value_generators.primitives)": [[24, "polyfactory.value_generators.primitives.create_random_float"]], "create_random_integer() (in module polyfactory.value_generators.primitives)": [[24, "polyfactory.value_generators.primitives.create_random_integer"]], "create_random_string() (in module polyfactory.value_generators.primitives)": [[24, "polyfactory.value_generators.primitives.create_random_string"]], "polyfactory.value_generators.primitives": [[24, "module-polyfactory.value_generators.primitives"]]}})